/* The following code was generated by JFlex 1.6.1 */

//packages
package minicsharp;
import java.util.ArrayList;
import java.io.FileWriter;
import java.io.IOException;
import java_cup.runtime.Symbol;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>miniCsharp.jflex</tt>
 */
public class Analyzer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0, 25, 23, 25, 25, 25,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    25, 28, 22,  0,  0,  1,  0,  0, 51, 52, 27, 21,  0, 20, 18, 26, 
    14,  5,  5,  5,  5,  5,  5,  5,  5,  5,  0, 50,  0,  2,  0,  0, 
     0, 43, 17, 17, 17, 19, 17,  4,  4, 47,  4,  4, 48, 49, 42,  4, 
    45,  4, 46,  4,  4,  4,  4,  4, 16,  4,  4, 53, 24, 54,  0,  4, 
     0, 11, 36, 38, 33,  9, 10, 37, 39, 29,  4, 41, 12, 30, 32, 35, 
    31,  4,  7, 13,  6,  8, 34, 40, 15, 44,  4, 55,  3, 56,  0,  4, 
     4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4, 
     4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4, 
     4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4, 
     4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4, 
     4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4, 
     4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4, 
     4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4, 
     4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\5\5"+
    "\1\6\1\7\1\1\1\10\1\11\1\2\1\12\13\5"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\7\5\2\0\1\23\2\0\1\24\1\25\15\5\4\22"+
    "\7\5\1\6\1\23\1\26\1\24\2\0\1\5\1\27"+
    "\7\5\1\30\3\5\1\22\1\0\1\31\1\32\1\5"+
    "\1\33\2\5\2\0\1\34\1\24\2\5\1\35\1\5"+
    "\1\36\1\5\1\37\6\5\1\0\1\22\3\5\1\34"+
    "\3\5\1\40\1\41\1\42\1\5\1\43\3\5\2\22"+
    "\1\44\1\5\1\45\1\24\2\5\1\46\3\5\1\47"+
    "\1\22\1\50\1\24\2\0\7\5\1\51\1\5\1\52"+
    "\1\5\1\53\1\5\1\54\1\5\1\55";

  private static int [] zzUnpackAction() {
    int [] result = new int[171];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\71\0\71\0\71\0\162\0\253\0\344"+
    "\0\u011d\0\u0156\0\u018f\0\u01c8\0\u0201\0\71\0\u023a\0\71"+
    "\0\71\0\u0273\0\71\0\u02ac\0\u02e5\0\u031e\0\u0357\0\u0390"+
    "\0\u03c9\0\u0402\0\u043b\0\u0474\0\u04ad\0\u04e6\0\71\0\71"+
    "\0\71\0\71\0\71\0\71\0\71\0\u051f\0\u0558\0\u0591"+
    "\0\u05ca\0\u0603\0\u063c\0\u0675\0\u06ae\0\u06e7\0\u023a\0\71"+
    "\0\u0720\0\u0759\0\u0792\0\162\0\u07cb\0\u0804\0\u083d\0\u0876"+
    "\0\u08af\0\u08e8\0\u0921\0\u095a\0\u0993\0\u09cc\0\u0a05\0\u0a3e"+
    "\0\u0a77\0\u0ab0\0\u0ae9\0\u0b22\0\u0b5b\0\u0b94\0\u0bcd\0\u0c06"+
    "\0\u0c3f\0\u0c78\0\u0cb1\0\u0cea\0\u06e7\0\u023a\0\71\0\u0d23"+
    "\0\u0d5c\0\u0d95\0\u0dce\0\u0e07\0\u0e40\0\u0e79\0\u0eb2\0\u0eeb"+
    "\0\u0f24\0\u0f5d\0\u0f96\0\u0fcf\0\u1008\0\u1041\0\u107a\0\u10b3"+
    "\0\u10ec\0\162\0\162\0\u1125\0\162\0\u115e\0\u1197\0\u11d0"+
    "\0\u1209\0\71\0\u1242\0\u127b\0\u12b4\0\162\0\u12ed\0\162"+
    "\0\u1326\0\162\0\u135f\0\u1398\0\u13d1\0\u140a\0\u1443\0\u147c"+
    "\0\u14b5\0\u14ee\0\u1527\0\u1560\0\u1599\0\u15d2\0\u160b\0\u1644"+
    "\0\u167d\0\162\0\162\0\162\0\u16b6\0\162\0\u16ef\0\u1728"+
    "\0\u1761\0\u179a\0\u17d3\0\162\0\u180c\0\162\0\u1845\0\u187e"+
    "\0\u18b7\0\162\0\u18f0\0\u1929\0\u1962\0\162\0\u199b\0\162"+
    "\0\u19d4\0\u15d2\0\u1a0d\0\u1a46\0\u1a7f\0\u1ab8\0\u1af1\0\u1b2a"+
    "\0\u1b63\0\u1b9c\0\162\0\u1bd5\0\162\0\u1c0e\0\162\0\u1c47"+
    "\0\162\0\u1c80\0\162";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[171];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\6\1\12\1\13\2\6\1\14\1\15\3\6\1\16"+
    "\1\6\1\2\1\3\1\17\1\20\1\2\1\21\1\22"+
    "\1\3\1\23\1\24\2\6\1\25\1\26\1\27\1\6"+
    "\1\30\1\6\1\31\1\6\1\32\1\6\1\33\2\6"+
    "\1\34\1\35\2\6\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\75\0\16\6\1\0\1\6\11\0"+
    "\25\6\14\0\1\7\10\0\1\7\3\0\1\46\52\0"+
    "\3\6\1\47\12\6\1\0\1\6\11\0\12\6\1\50"+
    "\12\6\13\0\5\6\1\51\10\6\1\0\1\6\11\0"+
    "\25\6\13\0\10\6\1\52\2\6\1\53\2\6\1\0"+
    "\1\6\11\0\25\6\13\0\7\6\1\54\6\6\1\0"+
    "\1\6\11\0\25\6\13\0\2\6\1\55\13\6\1\0"+
    "\1\6\11\0\25\6\14\0\1\7\10\0\1\7\2\56"+
    "\1\0\1\46\46\0\26\57\1\60\1\0\1\61\40\57"+
    "\32\0\1\62\1\63\41\0\6\6\1\64\7\6\1\0"+
    "\1\6\11\0\1\6\1\65\1\6\1\66\21\6\13\0"+
    "\4\6\1\67\11\6\1\0\1\6\11\0\25\6\13\0"+
    "\16\6\1\0\1\6\11\0\6\6\1\70\16\6\13\0"+
    "\16\6\1\0\1\6\11\0\6\6\1\71\16\6\13\0"+
    "\3\6\1\72\12\6\1\0\1\6\11\0\6\6\1\73"+
    "\16\6\13\0\10\6\1\74\5\6\1\0\1\6\11\0"+
    "\25\6\13\0\16\6\1\0\1\6\11\0\12\6\1\75"+
    "\12\6\13\0\5\6\1\76\10\6\1\0\1\6\11\0"+
    "\25\6\13\0\3\6\1\77\12\6\1\0\1\6\11\0"+
    "\25\6\13\0\5\6\1\100\10\6\1\0\1\6\11\0"+
    "\25\6\13\0\7\6\1\101\6\6\1\0\1\6\11\0"+
    "\25\6\14\0\1\46\3\0\1\102\4\0\1\103\3\0"+
    "\1\104\1\102\2\105\47\0\4\6\1\106\11\6\1\0"+
    "\1\6\11\0\25\6\13\0\16\6\1\0\1\6\11\0"+
    "\1\107\24\6\13\0\2\6\1\110\13\6\1\0\1\6"+
    "\11\0\25\6\13\0\11\6\1\111\4\6\1\0\1\6"+
    "\11\0\25\6\13\0\2\6\1\112\13\6\1\0\1\6"+
    "\11\0\25\6\13\0\10\6\1\113\5\6\1\0\1\6"+
    "\11\0\25\6\13\0\3\6\1\114\12\6\1\0\1\6"+
    "\11\0\25\6\14\0\1\115\3\0\3\115\2\0\1\115"+
    "\2\0\1\115\1\0\1\115\15\0\1\115\2\0\1\115"+
    "\1\0\1\115\4\0\1\115\15\0\26\57\1\116\1\0"+
    "\1\61\40\57\27\62\1\117\41\62\32\120\1\121\1\122"+
    "\35\120\4\0\16\6\1\0\1\6\11\0\2\6\1\123"+
    "\22\6\13\0\2\6\1\124\13\6\1\0\1\6\11\0"+
    "\25\6\13\0\10\6\1\125\5\6\1\0\1\6\11\0"+
    "\25\6\13\0\4\6\1\126\11\6\1\0\1\6\11\0"+
    "\25\6\13\0\16\6\1\0\1\6\11\0\1\127\24\6"+
    "\13\0\5\6\1\130\10\6\1\0\1\6\11\0\25\6"+
    "\13\0\16\6\1\0\1\6\11\0\6\6\1\131\16\6"+
    "\13\0\7\6\1\132\6\6\1\0\1\6\11\0\25\6"+
    "\13\0\16\6\1\0\1\6\11\0\1\133\24\6\13\0"+
    "\16\6\1\0\1\6\11\0\13\6\1\134\11\6\13\0"+
    "\16\6\1\0\1\6\11\0\1\135\24\6\13\0\7\6"+
    "\1\136\6\6\1\0\1\6\11\0\25\6\13\0\10\6"+
    "\1\137\5\6\1\0\1\6\11\0\25\6\14\0\1\105"+
    "\10\0\1\140\3\0\1\104\1\0\2\105\50\0\1\46"+
    "\3\0\1\102\4\0\1\103\2\141\1\0\1\104\1\102"+
    "\2\105\50\0\1\104\10\0\1\104\57\0\1\105\10\0"+
    "\1\140\3\0\1\104\52\0\5\6\1\142\10\6\1\0"+
    "\1\6\11\0\25\6\13\0\11\6\1\143\4\6\1\0"+
    "\1\6\11\0\25\6\13\0\4\6\1\144\11\6\1\0"+
    "\1\6\11\0\25\6\13\0\5\6\1\145\10\6\1\0"+
    "\1\6\11\0\25\6\13\0\5\6\1\146\10\6\1\0"+
    "\1\6\11\0\25\6\13\0\11\6\1\106\4\6\1\0"+
    "\1\6\11\0\25\6\13\0\16\6\1\0\1\6\11\0"+
    "\1\147\24\6\7\0\33\120\1\122\35\120\32\150\1\63"+
    "\1\151\35\150\32\63\1\152\1\153\35\63\4\0\10\6"+
    "\1\154\5\6\1\0\1\6\11\0\25\6\13\0\5\6"+
    "\1\155\10\6\1\0\1\6\11\0\25\6\13\0\10\6"+
    "\1\156\5\6\1\0\1\6\11\0\25\6\13\0\16\6"+
    "\1\0\1\6\11\0\7\6\1\157\15\6\13\0\16\6"+
    "\1\0\1\6\11\0\4\6\1\160\20\6\13\0\7\6"+
    "\1\161\6\6\1\0\1\6\11\0\25\6\13\0\10\6"+
    "\1\162\5\6\1\0\1\6\11\0\25\6\13\0\11\6"+
    "\1\163\4\6\1\0\1\6\11\0\25\6\13\0\10\6"+
    "\1\164\5\6\1\0\1\6\11\0\25\6\13\0\16\6"+
    "\1\0\1\6\11\0\16\6\1\165\6\6\13\0\16\6"+
    "\1\0\1\6\11\0\3\6\1\166\21\6\13\0\16\6"+
    "\1\0\1\6\11\0\4\6\1\167\20\6\13\0\10\6"+
    "\1\170\5\6\1\0\1\6\11\0\25\6\14\0\1\105"+
    "\10\0\1\140\2\171\1\0\1\104\53\0\1\172\3\0"+
    "\3\172\2\0\1\172\2\0\1\172\1\0\1\172\15\0"+
    "\1\172\2\0\1\172\1\0\1\172\4\0\1\172\21\0"+
    "\3\6\1\173\12\6\1\0\1\6\11\0\25\6\13\0"+
    "\16\6\1\0\1\6\11\0\3\6\1\174\21\6\13\0"+
    "\16\6\1\0\1\6\11\0\3\6\1\175\21\6\7\0"+
    "\33\150\1\151\67\150\1\152\1\151\35\150\32\120\1\176"+
    "\1\122\35\120\4\0\5\6\1\177\10\6\1\0\1\6"+
    "\11\0\25\6\13\0\3\6\1\200\12\6\1\0\1\6"+
    "\11\0\25\6\13\0\10\6\1\201\5\6\1\0\1\6"+
    "\11\0\25\6\13\0\16\6\1\0\1\6\11\0\14\6"+
    "\1\202\10\6\13\0\11\6\1\203\4\6\1\0\1\6"+
    "\11\0\25\6\13\0\5\6\1\204\10\6\1\0\1\6"+
    "\11\0\25\6\13\0\3\6\1\205\12\6\1\0\1\6"+
    "\11\0\25\6\13\0\2\6\1\206\13\6\1\0\1\6"+
    "\11\0\25\6\13\0\16\6\1\0\1\6\11\0\22\6"+
    "\1\207\1\210\1\6\13\0\16\6\1\0\1\6\11\0"+
    "\6\6\1\211\16\6\14\0\1\212\3\0\3\212\2\0"+
    "\1\212\2\0\1\212\1\0\1\212\15\0\1\212\2\0"+
    "\1\212\1\0\1\212\4\0\1\212\22\0\1\172\3\0"+
    "\3\172\2\0\1\213\2\0\1\172\1\104\1\172\2\105"+
    "\13\0\1\172\2\0\1\172\1\0\1\172\4\0\1\172"+
    "\21\0\16\6\1\0\1\6\11\0\3\6\1\214\21\6"+
    "\13\0\16\6\1\0\1\6\11\0\4\6\1\215\20\6"+
    "\13\0\16\6\1\0\1\6\11\0\10\6\1\216\14\6"+
    "\41\0\1\217\42\0\16\6\1\0\1\6\11\0\1\6"+
    "\1\220\23\6\13\0\6\6\1\221\7\6\1\0\1\6"+
    "\11\0\25\6\13\0\5\6\1\222\10\6\1\0\1\6"+
    "\11\0\25\6\13\0\3\6\1\223\12\6\1\0\1\6"+
    "\11\0\25\6\13\0\16\6\1\0\1\6\11\0\3\6"+
    "\1\224\21\6\13\0\16\6\1\0\1\6\11\0\1\225"+
    "\24\6\13\0\16\6\1\0\1\6\11\0\11\6\1\226"+
    "\13\6\14\0\1\212\3\0\3\212\2\0\1\227\2\0"+
    "\1\212\1\104\1\212\15\0\1\212\2\0\1\212\1\0"+
    "\1\212\4\0\1\212\22\0\1\172\3\0\3\172\2\0"+
    "\1\213\2\141\1\172\1\104\1\172\2\105\13\0\1\172"+
    "\2\0\1\172\1\0\1\172\4\0\1\172\21\0\11\6"+
    "\1\230\4\6\1\0\1\6\11\0\25\6\7\0\32\231"+
    "\1\232\1\233\35\231\4\0\5\6\1\234\10\6\1\0"+
    "\1\6\11\0\25\6\13\0\7\6\1\235\6\6\1\0"+
    "\1\6\11\0\25\6\13\0\7\6\1\236\6\6\1\0"+
    "\1\6\11\0\25\6\13\0\2\6\1\237\13\6\1\0"+
    "\1\6\11\0\25\6\13\0\16\6\1\0\1\6\11\0"+
    "\3\6\1\240\21\6\14\0\1\212\3\0\3\212\2\0"+
    "\1\227\2\171\1\212\1\104\1\212\15\0\1\212\2\0"+
    "\1\212\1\0\1\212\4\0\1\212\15\0\33\231\1\233"+
    "\35\231\32\217\1\0\36\217\4\0\16\6\1\0\1\6"+
    "\11\0\3\6\1\241\21\6\13\0\16\6\1\0\1\6"+
    "\11\0\11\6\1\242\13\6\13\0\16\6\1\0\1\6"+
    "\11\0\17\6\1\243\5\6\13\0\5\6\1\244\10\6"+
    "\1\0\1\6\11\0\25\6\13\0\5\6\1\245\10\6"+
    "\1\0\1\6\11\0\25\6\13\0\2\6\1\246\13\6"+
    "\1\0\1\6\11\0\25\6\13\0\5\6\1\247\10\6"+
    "\1\0\1\6\11\0\25\6\13\0\16\6\1\0\1\6"+
    "\11\0\10\6\1\250\14\6\13\0\11\6\1\251\4\6"+
    "\1\0\1\6\11\0\25\6\13\0\5\6\1\252\10\6"+
    "\1\0\1\6\11\0\25\6\13\0\3\6\1\253\12\6"+
    "\1\0\1\6\11\0\25\6\7\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7353];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\4\11\10\1\1\11\1\1\2\11\1\1\1\11"+
    "\13\1\7\11\10\1\2\0\1\11\2\0\34\1\1\11"+
    "\1\1\2\0\16\1\1\0\6\1\2\0\1\11\16\1"+
    "\1\0\40\1\2\0\20\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[171];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
//Developer´s extra code declaration
public static sym asym=new sym();
private static int errorCounter=0;
public   boolean commentError=false;
class token{
	public String content="";
	public int line=0;
	public int column=0;
	public token(String aContent,int aLine,int aColumn){
			content=aContent;
			line=aLine;
			column=aColumn;
	}
}
class Yytoken{
		public Yytoken(){

		}
	}
public static ArrayList<String>TokenList=new ArrayList<String>();
private static String  addsTabs(int tokenLength){
	String tabs="";
	for(int i=32-tokenLength;i>0;i--){
		tabs+=" ";
	}
	return tabs;

}
public static String CreateTokenLog(Boolean isError,String token, int lineNumber,int columnNumber,String description){
	String newToken=token+addsTabs(token.length())+"\t\tLine Number: "+(lineNumber+1)+"\t"+"Column Number: "+(columnNumber)+" To: "+getLastColumn(columnNumber,token.length())+"\tToken Type: "+description+" Token: "+token+"\n";

	String ErrorToken=token+addsTabs(token.length())+"\t\tError at line: "+(lineNumber+1)+"\tDescription: "+description+"\n";

	return isError?ErrorToken:newToken;
}
public static int getLastColumn(int firstColumns,int tokenLength){
	return firstColumns+tokenLength;
}
public static void CreateOutputFile(String outputPath) throws IOException{
	FileWriter writer = null; 
      try {
          writer = new FileWriter(outputPath);
      } catch (IOException ex) {
          System.out.println("Something wrong happened with the output file...");
      }
for(String str: TokenList) {
  writer.write(str);
}
writer.close();
System.out.println("Done!");
if(errorCounter==0){
	System.out.println("The file contains no errors, This file is a cs file");
}
else{
	System.out.println("The file contains "+errorCounter+" errors, This is not a cs file");
}
}




  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Analyzer(java.io.Reader in) {
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { TokenList.add(CreateTokenLog(true,yytext(),yyline,yycolumn,"UNRECOGNIZED CHARACTER")); errorCounter+=1;
            }
          case 46: break;
          case 2: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,yytext()));
						return new Symbol(sym.arit,new token(yytext(),yyline+1,yycolumn+1));
            }
          case 47: break;
          case 3: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,"="));
						return new Symbol(sym.equal,new token(yytext(),yyline+1,yycolumn+1));
            }
          case 48: break;
          case 4: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,yytext()));
						return new Symbol(sym.logic,new token(yytext(),yyline+1,yycolumn+1));
            }
          case 49: break;
          case 5: 
            { if(yytext().length()>31){
			
							TokenList.add(CreateTokenLog(true,yytext().substring(0,30),yyline,yycolumn,"IDENTIFIER_TO_LONG,_MAX_SIZE_31_CHARACTERS"));
							errorCounter+=1;
						}
						else{
							TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,"IDENTIFIER"));
							return new Symbol(sym.IDENT,new token(yytext(),yyline+1,yycolumn+1));
						}
            }
          case 50: break;
          case 6: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,"INTEGER"));
							return new Symbol(sym.INTCONSTANT,new token(yytext(),yyline+1,yycolumn+1));
            }
          case 51: break;
          case 7: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,"."));
						return new Symbol(sym.dot,new token(yytext(),yyline+1,yycolumn+1));
            }
          case 52: break;
          case 8: 
            { /*Do nothing...*/
            }
          case 53: break;
          case 9: 
            { /*TokenList.add(CreateTokenLog(false,yytext(),yyline,yycolumn,"WHITE_SPACE"));*/
            }
          case 54: break;
          case 10: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,"!"));
						return new Symbol(sym.exclamation,new token(yytext(),yyline+1,yycolumn+1));
            }
          case 55: break;
          case 11: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,";"));
						return new Symbol(sym.semicolon,new token(yytext(),yyline+1,yycolumn+1));
            }
          case 56: break;
          case 12: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,"("));
						return new Symbol(sym.leftparen,new token(yytext(),yyline+1,yycolumn+1));
            }
          case 57: break;
          case 13: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,")"));
						return new Symbol(sym.rightparen,new token(yytext(),yyline+1,yycolumn+1));
            }
          case 58: break;
          case 14: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,"["));
						return new Symbol(sym.leftsquarebrace,new token(yytext(),yyline+1,yycolumn+1));
            }
          case 59: break;
          case 15: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,"]"));
						return new Symbol(sym.rightsquarebrace,new token(yytext(),yyline+1,yycolumn+1));
            }
          case 60: break;
          case 16: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,"{"));
						return new Symbol(sym.leftbrace,new token(yytext(),yyline+1,yycolumn+1));
            }
          case 61: break;
          case 17: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,"}"));
						return new Symbol(sym.rightbrace,new token(yytext(),yyline+1,yycolumn+1));
            }
          case 62: break;
          case 18: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,"DOUBLE"));
							return new Symbol(sym.DOUBLECONSTANT,new token(yytext(),yyline+1,yycolumn+1));
            }
          case 63: break;
          case 19: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,"STRING"));
							return new Symbol(sym.STRINGCONSTANT,new token(yytext(),yyline+1,yycolumn+1));
            }
          case 64: break;
          case 20: 
            { TokenList.add(CreateTokenLog(true,yytext(),yyline,yycolumn,"MULTILINE_COMMENT_ERROR_MISSING *\\"));errorCounter+=1;
            }
          case 65: break;
          case 21: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,"if"));
						return new Symbol(sym.IF,new token(yytext(),yyline+1,yycolumn+1));
            }
          case 66: break;
          case 22: 
            { /*TokenList.add(CreateTokenLog(false,yytext(),yyline,yycolumn,"NORMAL_COMMENT"));*/
            }
          case 67: break;
          case 23: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,"int"));
						return new Symbol(sym.INT,new token(yytext(),yyline+1,yycolumn+1));
            }
          case 68: break;
          case 24: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,"New"));
						return new Symbol(sym.New,new token(yytext(),yyline+1,yycolumn+1));
            }
          case 69: break;
          case 25: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,"BOOLEAN"));
							return new Symbol(sym.BOOLEANCONSTANT,new token(yytext(),yyline+1,yycolumn+1));
            }
          case 70: break;
          case 26: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,"this"));
						return new Symbol(sym.THIS,new token(yytext(),yyline+1,yycolumn+1));
            }
          case 71: break;
          case 27: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,"else"));
						return new Symbol(sym.else_t,new token(yytext(),yyline+1,yycolumn+1));
            }
          case 72: break;
          case 28: 
            { /*TokenList.add(CreateTokenLog(false,yytext(),yyline,yycolumn,"MULTILINE_COMMENT"));*/
            }
          case 73: break;
          case 29: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,"null"));
						return new Symbol(sym.NULL,new token(yytext(),yyline+1,yycolumn+1));
            }
          case 74: break;
          case 30: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,"void"));
						return new Symbol(sym.VOID,new token(yytext(),yyline+1,yycolumn+1));
            }
          case 75: break;
          case 31: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,"bool"));
						return new Symbol(sym.BOOL,new token(yytext(),yyline+1,yycolumn+1));
            }
          case 76: break;
          case 32: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,"break"));
						return new Symbol(sym.BREAK,new token(yytext(),yyline+1,yycolumn+1));
            }
          case 77: break;
          case 33: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,"class"));
						return new Symbol(sym.CLASS,new token(yytext(),yyline+1,yycolumn+1));
            }
          case 78: break;
          case 34: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,"while"));
						return new Symbol(sym.WHILE,new token(yytext(),yyline+1,yycolumn+1));
            }
          case 79: break;
          case 35: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,"Print"));
						return new Symbol(sym.Print,new token(yytext(),yyline+1,yycolumn+1));
            }
          case 80: break;
          case 36: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,"return"));
						return new Symbol(sym.RETURN,new token(yytext(),yyline+1,yycolumn+1));
            }
          case 81: break;
          case 37: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,"string"));
						return new Symbol(sym.STRING,new token(yytext(),yyline+1,yycolumn+1));
            }
          case 82: break;
          case 38: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,"double"));
						return new Symbol(sym.DOUBLE,new token(yytext(),yyline+1,yycolumn+1));
            }
          case 83: break;
          case 39: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,"Malloc"));
						return new Symbol(sym.Malloc,new token(yytext(),yyline+1,yycolumn+1));
            }
          case 84: break;
          case 40: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,"extends"));
						return new Symbol(sym.extends_t,new token(yytext(),yyline+1,yycolumn+1));
            }
          case 85: break;
          case 41: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,"NewArray"));
						return new Symbol(sym.NewArray,new token(yytext(),yyline+1,yycolumn+1));
            }
          case 86: break;
          case 42: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,"ReadLine"));
						return new Symbol(sym.ReadLine,new token(yytext(),yyline+1,yycolumn+1));
            }
          case 87: break;
          case 43: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,"interface"));
						return new Symbol(sym.interface_t,new token(yytext(),yyline+1,yycolumn+1));
            }
          case 88: break;
          case 44: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,"implements"));
						return new Symbol(sym.implements_t,new token(yytext(),yyline+1,yycolumn+1));
            }
          case 89: break;
          case 45: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,"ReadInteger"));
						return new Symbol(sym.ReadInteger,new token(yytext(),yyline+1,yycolumn+1));
            }
          case 90: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
