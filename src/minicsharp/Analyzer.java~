/* The following code was generated by JFlex 1.6.1 */

//packages
package minicsharp;
import java.util.ArrayList;
import java.io.FileWriter;
import java.io.IOException;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>miniCsharp.jflex</tt>
 */
public class Analyzer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\63\1\61\1\63\1\63\1\63\22\0\1\63\1\42\1\60"+
    "\2\0\1\46\1\50\1\0\1\40\1\41\1\44\1\43\1\46\1\43"+
    "\1\52\1\45\1\53\1\56\6\56\2\2\1\0\1\46\1\42\1\47"+
    "\1\42\2\0\1\32\1\55\2\55\1\57\1\55\7\1\1\31\11\1"+
    "\1\54\2\1\1\34\1\62\1\35\1\0\1\1\1\0\1\21\1\12"+
    "\1\20\1\6\1\14\1\22\1\17\1\23\1\5\1\1\1\30\1\13"+
    "\1\25\1\7\1\4\1\26\1\1\1\16\1\15\1\10\1\11\1\3"+
    "\1\27\1\24\1\33\1\1\1\36\1\51\1\37\1\0\6\1\1\1"+
    "\32\1\1\1\137\1\u1580\0\1\63\u097f\0\13\63\35\0\1\63\1\63"+
    "\5\0\1\63\57\0\1\63\u0fa0\0\1\63\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\ud00f\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\15\2\6\4\1\1\1\5"+
    "\1\4\1\3\1\1\1\6\1\5\2\0\2\2\1\7"+
    "\20\2\1\10\4\0\1\3\1\0\1\11\1\0\1\12"+
    "\1\0\1\2\1\7\15\2\1\7\1\10\2\0\1\13"+
    "\1\3\1\11\2\2\1\14\5\2\1\10\1\15\2\0"+
    "\6\2\1\15\3\2\1\10\3\2\1\10\2\0\1\2";

  private static int [] zzUnpackAction() {
    int [] result = new int[114];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\64\0\150\0\234\0\320\0\u0104\0\u0138\0\u016c"+
    "\0\u01a0\0\u01d4\0\u0208\0\u023c\0\u0270\0\u02a4\0\u02d8\0\u030c"+
    "\0\u0340\0\u0374\0\64\0\u03a8\0\u03dc\0\u0410\0\u0444\0\u0478"+
    "\0\u04ac\0\u04e0\0\u0514\0\u0548\0\64\0\64\0\u057c\0\u04e0"+
    "\0\u05b0\0\u05e4\0\150\0\u0618\0\u064c\0\u0680\0\u06b4\0\u06e8"+
    "\0\u071c\0\u0750\0\u0784\0\u07b8\0\u07ec\0\u0820\0\u0854\0\u0888"+
    "\0\u08bc\0\u08f0\0\u0924\0\u0958\0\u098c\0\u09c0\0\u09f4\0\u0a28"+
    "\0\u0a5c\0\u0548\0\64\0\u0a90\0\u0ac4\0\u0ac4\0\u0af8\0\u0b2c"+
    "\0\u0b60\0\u0b94\0\u0bc8\0\u0bfc\0\u0c30\0\u0c64\0\u0c98\0\u0ccc"+
    "\0\u0d00\0\u0d34\0\u0d68\0\u0d9c\0\u0dd0\0\u0e04\0\u0e38\0\u0e6c"+
    "\0\u0ea0\0\64\0\u0a28\0\u0548\0\u0ed4\0\u0f08\0\150\0\u0f3c"+
    "\0\u0f70\0\u0fa4\0\u0fd8\0\u100c\0\u1040\0\64\0\u1074\0\u10a8"+
    "\0\u10dc\0\u1110\0\u1144\0\u1178\0\u11ac\0\u11e0\0\u1214\0\u1248"+
    "\0\u127c\0\u12b0\0\u12e4\0\u1318\0\u134c\0\u1380\0\u13b4\0\u13e8"+
    "\0\u1214\0\u141c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[114];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\3\1\6\1\7\1\10"+
    "\1\11\1\3\1\12\1\3\1\13\1\14\1\15\1\3"+
    "\1\16\1\3\1\17\4\3\1\20\1\3\1\21\2\3"+
    "\1\22\1\23\1\24\1\23\1\25\1\23\1\26\2\23"+
    "\1\27\1\23\1\26\1\30\1\31\1\32\1\33\2\3"+
    "\1\4\1\3\1\34\1\35\1\2\1\36\65\0\33\3"+
    "\17\0\5\3\6\0\1\4\11\0\1\37\35\0\1\40"+
    "\1\4\2\0\1\4\1\37\5\0\3\3\1\41\27\3"+
    "\17\0\5\3\5\0\6\3\1\42\12\3\1\43\2\3"+
    "\1\44\6\3\17\0\5\3\5\0\3\3\1\45\27\3"+
    "\17\0\5\3\5\0\10\3\1\46\22\3\17\0\5\3"+
    "\5\0\15\3\1\47\4\3\1\50\10\3\17\0\5\3"+
    "\5\0\3\3\1\51\11\3\1\52\15\3\17\0\5\3"+
    "\5\0\12\3\1\53\10\3\1\54\7\3\17\0\5\3"+
    "\5\0\7\3\1\55\23\3\17\0\5\3\5\0\13\3"+
    "\1\56\17\3\17\0\5\3\5\0\12\3\1\57\20\3"+
    "\17\0\5\3\5\0\3\3\1\60\14\3\1\61\12\3"+
    "\17\0\5\3\5\0\22\3\1\62\10\3\17\0\5\3"+
    "\5\0\13\3\1\63\17\3\17\0\5\3\41\0\1\23"+
    "\65\0\1\23\65\0\1\23\71\0\1\23\60\0\1\64"+
    "\1\65\66\0\1\23\64\0\1\23\14\0\1\66\50\0"+
    "\1\66\2\0\1\66\7\0\1\67\11\0\1\37\7\0"+
    "\1\70\25\0\1\40\1\71\1\70\1\0\1\71\1\37"+
    "\4\0\60\72\1\73\1\0\1\74\1\72\2\0\1\75"+
    "\40\0\1\76\7\0\1\75\2\0\1\75\6\0\4\3"+
    "\1\77\26\3\17\0\5\3\5\0\7\3\1\100\23\3"+
    "\17\0\5\3\5\0\25\3\1\101\5\3\17\0\5\3"+
    "\5\0\10\3\1\102\22\3\17\0\5\3\5\0\12\3"+
    "\1\103\20\3\17\0\5\3\5\0\10\3\1\104\22\3"+
    "\17\0\5\3\5\0\4\3\1\105\26\3\17\0\5\3"+
    "\5\0\3\3\1\103\27\3\17\0\5\3\5\0\13\3"+
    "\1\106\17\3\17\0\5\3\5\0\14\3\1\107\16\3"+
    "\17\0\5\3\5\0\7\3\1\110\23\3\17\0\5\3"+
    "\5\0\15\3\1\111\15\3\17\0\5\3\5\0\7\3"+
    "\1\112\23\3\17\0\5\3\5\0\20\3\1\113\12\3"+
    "\17\0\5\3\5\0\15\3\1\43\15\3\17\0\5\3"+
    "\5\0\12\3\1\114\20\3\17\0\5\3\5\0\4\3"+
    "\1\115\26\3\17\0\5\3\5\0\26\3\1\116\4\3"+
    "\17\0\5\3\4\0\44\117\1\120\1\121\16\117\61\65"+
    "\1\122\2\65\2\0\1\66\11\0\1\37\36\0\1\66"+
    "\2\0\1\66\1\37\6\0\1\67\11\0\1\37\35\0"+
    "\1\40\1\67\2\0\1\67\1\37\6\0\1\123\3\0"+
    "\1\123\3\0\1\123\1\0\1\123\3\0\3\123\7\0"+
    "\1\123\20\0\1\123\1\0\3\123\6\0\1\67\11\0"+
    "\1\37\35\0\1\40\1\71\2\0\1\71\1\37\4\0"+
    "\60\72\1\124\1\0\1\74\1\72\2\0\1\75\50\0"+
    "\1\75\2\0\1\75\6\0\5\3\1\43\25\3\17\0"+
    "\5\3\5\0\13\3\1\125\17\3\17\0\5\3\5\0"+
    "\12\3\1\126\20\3\17\0\5\3\5\0\11\3\1\115"+
    "\21\3\17\0\5\3\5\0\12\3\1\43\20\3\17\0"+
    "\5\3\5\0\13\3\1\127\17\3\17\0\5\3\5\0"+
    "\14\3\1\43\16\3\17\0\5\3\5\0\20\3\1\130"+
    "\12\3\17\0\5\3\5\0\13\3\1\43\17\3\17\0"+
    "\5\3\5\0\13\3\1\131\17\3\17\0\5\3\5\0"+
    "\4\3\1\132\26\3\17\0\5\3\5\0\10\3\1\133"+
    "\22\3\17\0\5\3\5\0\14\3\1\105\16\3\17\0"+
    "\5\3\5\0\14\3\1\104\16\3\17\0\5\3\5\0"+
    "\12\3\1\107\20\3\17\0\5\3\5\0\31\3\1\134"+
    "\1\3\17\0\5\3\4\0\44\117\1\120\17\117\44\64"+
    "\1\135\1\136\16\64\44\137\1\140\1\64\16\137\1\0"+
    "\15\3\1\141\15\3\17\0\5\3\5\0\13\3\1\142"+
    "\17\3\17\0\5\3\5\0\27\3\1\43\3\3\17\0"+
    "\5\3\5\0\6\3\1\143\24\3\17\0\5\3\5\0"+
    "\6\3\1\144\24\3\17\0\5\3\5\0\15\3\1\145"+
    "\15\3\17\0\5\3\5\0\15\3\1\146\15\3\17\0"+
    "\5\3\4\0\44\117\1\120\1\147\16\117\44\137\1\140"+
    "\63\137\1\140\1\136\16\137\1\0\21\3\1\150\11\3"+
    "\17\0\5\3\5\0\24\3\1\151\6\3\17\0\5\3"+
    "\5\0\5\3\1\105\25\3\17\0\5\3\5\0\16\3"+
    "\1\43\14\3\17\0\5\3\5\0\6\3\1\43\24\3"+
    "\17\0\5\3\5\0\15\3\1\152\15\3\17\0\5\3"+
    "\51\0\1\153\17\0\20\3\1\154\12\3\17\0\5\3"+
    "\5\0\13\3\1\155\17\3\17\0\5\3\5\0\20\3"+
    "\1\156\12\3\17\0\5\3\4\0\44\157\1\160\1\161"+
    "\16\157\1\0\17\3\1\107\13\3\17\0\5\3\5\0"+
    "\6\3\1\162\24\3\17\0\5\3\5\0\32\3\1\43"+
    "\17\0\5\3\4\0\44\157\1\160\17\157\45\153\1\0"+
    "\16\153\1\0\7\3\1\105\23\3\17\0\5\3\4\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5200];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\20\1\1\11\11\1\2\11\2\0\24\1"+
    "\4\0\1\1\1\0\1\11\1\0\1\1\1\0\21\1"+
    "\2\0\1\11\13\1\1\11\2\0\17\1\2\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[114];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
//Developer´s extra code declaration
private static int errorCounter=0;
public   boolean commentError=false;
class Yytoken{
		public Yytoken(){

		}
	}
public static ArrayList<String>TokenList=new ArrayList<String>();
private static String  addsTabs(int tokenLength){
	String tabs="";
	for(int i=32-tokenLength;i>0;i--){
		tabs+=" ";
	}
	return tabs;

}
public static String CreateTokenLog(Boolean isError,String token, int lineNumber,int columnNumber,String description){
	String newToken=token+addsTabs(token.length())+"\t\tLine Number: "+(lineNumber+1)+"\t"+"Column Number: "+(columnNumber)+" To: "+getLastColumn(columnNumber,token.length())+"\tToken Type: "+description+" Token: "+token+"\n";

	String ErrorToken=token+addsTabs(token.length())+"\t\tError at line: "+(lineNumber+1)+"\tDescription: "+description+"\n";

	return isError?ErrorToken:newToken;
}
public static int getLastColumn(int firstColumns,int tokenLength){
	return firstColumns+tokenLength;
}
public static void CreateOutputFile(String outputPath) throws IOException{
	FileWriter writer = null; 
      try {
          writer = new FileWriter(outputPath);
      } catch (IOException ex) {
          System.out.println("Something wrong happened with the output file...");
      }
for(String str: TokenList) {
  writer.write(str);
}
writer.close();
System.out.println("Done!");
if(errorCounter==0){
	System.out.println("The file contains no errors, This file is a cs file");
}
else{
	System.out.println("The file contains "+errorCounter+" errors, This is not a cs file");
}
}




  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Analyzer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 226) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Yytoken yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { TokenList.add(CreateTokenLog(true,yytext(),yyline,yycolumn,"UNRECOGNIZED CHARACTER")); errorCounter+=1;
            }
          case 14: break;
          case 2: 
            { if(yytext().length()>31){
			
			TokenList.add(CreateTokenLog(true,yytext().substring(0,30),yyline,yycolumn,"IDENTIFIER_TO_LONG,_MAX_SIZE_31_CHARACTERS"));
			errorCounter+=1;
			}
			else{
				TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,"IDENTIFIER"));
			}
            }
          case 15: break;
          case 3: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,"INTEGER"));
            }
          case 16: break;
          case 4: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,"OPERATOR"));
            }
          case 17: break;
          case 5: 
            { /*TokenList.add(CreateTokenLog(false,yytext(),yyline,yycolumn,"WHITE_SPACE"));*/
            }
          case 18: break;
          case 6: 
            { /*Do nothing...*/
            }
          case 19: break;
          case 7: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,"RESERVERD_WORD"));
            }
          case 20: break;
          case 8: 
            { TokenList.add(CreateTokenLog(true,yytext(),yyline,yycolumn,"MULTILINE_COMMENT_ERROR_MISSING *\\"));errorCounter+=1;
            }
          case 21: break;
          case 9: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,"STRING"));
            }
          case 22: break;
          case 10: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,"DOUBLE"));
            }
          case 23: break;
          case 11: 
            { /*TokenList.add(CreateTokenLog(false,yytext(),yyline,yycolumn,"NORMAL_COMMENT"));*/
            }
          case 24: break;
          case 12: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,"BOOLEAN"));
            }
          case 25: break;
          case 13: 
            { /*TokenList.add(CreateTokenLog(false,yytext(),yyline,yycolumn,"MULTILINE_COMMENT"));*/
            }
          case 26: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
