/* The following code was generated by JFlex 1.6.1 */

//packages
package minicsharp;
import java.util.ArrayList;
import java.io.FileWriter;
import java.io.IOException;
import java_cup.runtime.Symbol;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>miniCsharp.jflex</tt>
 */
public class Analyzer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\34\1\26\1\30\1\30\1\30\22\0\1\34\1\35\1\25"+
    "\1\71\1\0\1\37\1\4\1\0\1\73\1\74\1\33\1\36\1\101"+
    "\1\40\1\24\1\32\1\20\7\7\2\7\1\0\1\72\1\1\1\3"+
    "\1\2\2\0\1\57\1\67\4\23\1\66\1\6\1\63\2\6\1\64"+
    "\1\65\1\56\1\6\1\61\1\6\1\62\1\70\4\6\1\22\2\6"+
    "\1\75\1\27\1\76\1\0\1\6\1\0\1\15\1\50\1\52\1\45"+
    "\1\13\1\14\1\51\1\53\1\41\1\6\1\55\1\16\1\42\1\44"+
    "\1\47\1\43\1\6\1\11\1\17\1\10\1\12\1\46\1\54\1\21"+
    "\1\60\1\6\1\77\1\5\1\100\1\0\6\6\1\31\32\6\1\6"+
    "\137\6\u1580\0\1\34\u097f\0\13\34\35\0\1\30\1\30\5\0\1\34"+
    "\57\0\1\34\u0fa0\0\1\34\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\ud00f\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\1\1\4\1\5\1\6"+
    "\5\5\1\6\1\7\1\1\1\10\1\4\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\15\5\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\2\1\0"+
    "\1\30\1\31\1\32\1\6\1\0\10\5\2\0\1\33"+
    "\1\0\1\34\1\35\1\36\1\37\20\5\1\40\2\0"+
    "\2\41\6\5\1\42\1\5\1\6\1\33\1\35\2\0"+
    "\1\5\1\43\11\5\1\44\5\5\3\0\1\45\1\46"+
    "\1\5\1\47\2\5\1\6\2\0\1\34\1\35\3\5"+
    "\1\50\1\5\1\51\1\5\1\52\11\5\1\53\1\0"+
    "\1\41\3\5\1\34\4\5\1\54\1\55\1\56\1\57"+
    "\1\5\1\60\5\5\1\41\1\61\1\5\1\62\1\35"+
    "\3\5\1\63\3\5\1\64\2\5\1\65\1\35\2\0"+
    "\2\5\1\66\3\5\1\67\1\70\2\5\1\71\1\5"+
    "\1\72\1\5\1\73\1\5\1\74\1\5\1\75";

  private static int [] zzUnpackAction() {
    int [] result = new int[212];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\102\0\204\0\306\0\u0108\0\u014a\0\u018c\0\u01ce"+
    "\0\u0210\0\u0252\0\u0294\0\u02d6\0\u0318\0\u035a\0\u039c\0\102"+
    "\0\u03de\0\102\0\102\0\u0420\0\102\0\u0462\0\102\0\102"+
    "\0\102\0\u04a4\0\u04e6\0\u0528\0\u056a\0\u05ac\0\u05ee\0\u0630"+
    "\0\u0672\0\u06b4\0\u06f6\0\u0738\0\u077a\0\u07bc\0\102\0\102"+
    "\0\102\0\102\0\u07fe\0\102\0\102\0\102\0\102\0\102"+
    "\0\u0840\0\102\0\102\0\102\0\u0882\0\u08c4\0\u0906\0\u0948"+
    "\0\u098a\0\u09cc\0\u0a0e\0\u0a50\0\u0a92\0\u0ad4\0\u0b16\0\u03de"+
    "\0\102\0\u0b58\0\u0b9a\0\u0bdc\0\102\0\u01ce\0\u0c1e\0\u0c60"+
    "\0\u0ca2\0\u0ce4\0\u0d26\0\u0d68\0\u0daa\0\u0dec\0\u0e2e\0\u0e70"+
    "\0\u0eb2\0\u0ef4\0\u0f36\0\u0f78\0\u0fba\0\u0ffc\0\102\0\u103e"+
    "\0\u1080\0\u08c4\0\u10c2\0\u1104\0\u1146\0\u1188\0\u11ca\0\u120c"+
    "\0\u124e\0\u01ce\0\u1290\0\u12d2\0\u03de\0\u1314\0\u1356\0\u1398"+
    "\0\u13da\0\u141c\0\u145e\0\u14a0\0\u14e2\0\u1524\0\u1566\0\u15a8"+
    "\0\u15ea\0\u162c\0\u166e\0\u16b0\0\u16f2\0\u1734\0\u1776\0\u17b8"+
    "\0\u17fa\0\u183c\0\u187e\0\u18c0\0\u01ce\0\u01ce\0\u1902\0\u01ce"+
    "\0\u1944\0\u1986\0\u19c8\0\u1a0a\0\u1a4c\0\102\0\u1a8e\0\u1ad0"+
    "\0\u1b12\0\u1b54\0\u01ce\0\u1b96\0\u01ce\0\u1bd8\0\u01ce\0\u1c1a"+
    "\0\u1c5c\0\u1c9e\0\u1ce0\0\u1d22\0\u1d64\0\u1da6\0\u1de8\0\u1e2a"+
    "\0\102\0\u1e6c\0\u1eae\0\u1ef0\0\u1f32\0\u1f74\0\u1fb6\0\u1ff8"+
    "\0\u203a\0\u207c\0\u20be\0\u01ce\0\u01ce\0\u01ce\0\u01ce\0\u2100"+
    "\0\u01ce\0\u2142\0\u2184\0\u21c6\0\u2208\0\u224a\0\u228c\0\u01ce"+
    "\0\u22ce\0\u01ce\0\u2310\0\u2352\0\u2394\0\u23d6\0\u01ce\0\u2418"+
    "\0\u245a\0\u249c\0\u01ce\0\u24de\0\u2520\0\u01ce\0\u2562\0\u1fb6"+
    "\0\u25a4\0\u25e6\0\u2628\0\u01ce\0\u266a\0\u26ac\0\u26ee\0\u01ce"+
    "\0\u01ce\0\u2730\0\u2772\0\u01ce\0\u27b4\0\u01ce\0\u27f6\0\u01ce"+
    "\0\u2838\0\u01ce\0\u287a\0\u01ce";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[212];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\10\1\14\1\15\2\10\1\16\1\17"+
    "\3\10\1\20\1\21\1\22\1\2\1\23\1\10\1\24"+
    "\1\25\1\23\1\26\1\27\1\30\1\31\1\32\2\10"+
    "\1\33\1\34\1\35\1\10\1\36\1\10\1\37\1\10"+
    "\1\40\1\10\1\41\2\10\1\42\1\43\2\10\1\44"+
    "\1\45\1\10\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\105\0\1\60\2\0\1\61"+
    "\1\0\10\61\1\0\3\61\5\0\1\61\7\0\30\61"+
    "\14\0\1\60\101\0\1\62\102\0\1\63\102\0\1\64"+
    "\102\0\16\10\5\0\1\10\7\0\30\10\20\0\1\11"+
    "\10\0\1\65\3\0\1\66\63\0\3\10\1\67\12\10"+
    "\5\0\1\10\7\0\12\10\1\70\15\10\17\0\5\10"+
    "\1\71\10\10\5\0\1\10\7\0\30\10\17\0\10\10"+
    "\1\72\2\10\1\73\2\10\5\0\1\10\7\0\30\10"+
    "\17\0\7\10\1\74\6\10\5\0\1\10\7\0\6\10"+
    "\1\75\21\10\17\0\2\10\1\76\13\10\5\0\1\10"+
    "\7\0\30\10\20\0\1\11\10\0\1\65\2\77\1\0"+
    "\1\66\55\0\25\100\1\101\1\0\1\102\52\100\32\0"+
    "\1\103\1\104\51\0\1\105\104\0\6\10\1\106\7\10"+
    "\5\0\1\10\7\0\1\10\1\107\1\10\1\110\24\10"+
    "\17\0\4\10\1\111\11\10\5\0\1\10\7\0\30\10"+
    "\17\0\16\10\5\0\1\10\7\0\6\10\1\112\21\10"+
    "\17\0\16\10\5\0\1\10\7\0\6\10\1\113\21\10"+
    "\17\0\3\10\1\114\12\10\5\0\1\10\7\0\6\10"+
    "\1\115\21\10\17\0\10\10\1\116\5\10\5\0\1\10"+
    "\7\0\6\10\1\117\21\10\17\0\16\10\5\0\1\10"+
    "\7\0\12\10\1\120\15\10\17\0\5\10\1\121\10\10"+
    "\5\0\1\10\7\0\30\10\17\0\3\10\1\122\12\10"+
    "\5\0\1\10\7\0\30\10\17\0\5\10\1\123\10\10"+
    "\5\0\1\10\7\0\30\10\17\0\7\10\1\124\6\10"+
    "\5\0\1\10\7\0\30\10\17\0\5\10\1\125\10\10"+
    "\5\0\1\10\7\0\30\10\17\0\5\10\1\126\10\10"+
    "\5\0\1\10\7\0\30\10\107\0\1\127\11\0\16\61"+
    "\1\130\4\0\1\61\7\0\30\61\20\0\1\11\10\0"+
    "\1\65\2\131\1\0\1\66\64\0\1\132\10\0\1\133"+
    "\67\0\4\10\1\134\11\10\5\0\1\10\7\0\30\10"+
    "\17\0\16\10\5\0\1\10\7\0\1\135\27\10\17\0"+
    "\2\10\1\136\13\10\5\0\1\10\7\0\30\10\17\0"+
    "\11\10\1\137\4\10\5\0\1\10\7\0\30\10\17\0"+
    "\2\10\1\140\13\10\5\0\1\10\7\0\30\10\17\0"+
    "\10\10\1\141\5\10\5\0\1\10\7\0\30\10\17\0"+
    "\3\10\1\142\12\10\5\0\1\10\7\0\30\10\17\0"+
    "\3\10\1\143\12\10\5\0\1\10\7\0\30\10\20\0"+
    "\1\144\3\0\3\144\2\0\1\144\2\0\1\144\21\0"+
    "\1\144\2\0\1\144\1\0\1\144\4\0\1\144\7\0"+
    "\1\144\12\0\25\100\1\145\1\0\1\102\52\100\26\103"+
    "\1\0\1\103\2\0\50\103\32\146\1\147\1\150\46\146"+
    "\6\0\16\10\5\0\1\10\7\0\2\10\1\151\25\10"+
    "\17\0\2\10\1\152\13\10\5\0\1\10\7\0\11\10"+
    "\1\153\16\10\17\0\10\10\1\154\5\10\5\0\1\10"+
    "\7\0\30\10\17\0\4\10\1\155\11\10\5\0\1\10"+
    "\7\0\30\10\17\0\16\10\5\0\1\10\7\0\1\156"+
    "\27\10\17\0\5\10\1\157\10\10\5\0\1\10\7\0"+
    "\30\10\17\0\16\10\5\0\1\10\7\0\6\10\1\160"+
    "\21\10\17\0\7\10\1\161\6\10\5\0\1\10\7\0"+
    "\30\10\17\0\16\10\5\0\1\10\7\0\3\10\1\162"+
    "\24\10\17\0\16\10\5\0\1\10\7\0\1\163\27\10"+
    "\17\0\16\10\5\0\1\10\7\0\13\10\1\164\14\10"+
    "\17\0\16\10\5\0\1\10\7\0\1\165\27\10\17\0"+
    "\7\10\1\166\6\10\5\0\1\10\7\0\30\10\17\0"+
    "\10\10\1\167\5\10\5\0\1\10\7\0\30\10\17\0"+
    "\2\10\1\170\13\10\5\0\1\10\7\0\30\10\17\0"+
    "\2\10\1\171\13\10\5\0\1\10\7\0\30\10\17\0"+
    "\1\172\1\0\10\172\1\0\3\172\5\0\1\172\7\0"+
    "\30\172\20\0\1\173\3\0\3\173\2\0\1\173\2\0"+
    "\1\173\21\0\1\173\2\0\1\173\1\0\1\173\4\0"+
    "\1\173\7\0\1\173\21\0\1\132\10\0\1\133\2\174"+
    "\65\0\5\10\1\175\10\10\5\0\1\10\7\0\30\10"+
    "\17\0\11\10\1\176\4\10\5\0\1\10\7\0\30\10"+
    "\17\0\4\10\1\177\11\10\5\0\1\10\7\0\30\10"+
    "\17\0\5\10\1\200\10\10\5\0\1\10\7\0\30\10"+
    "\17\0\5\10\1\201\10\10\5\0\1\10\7\0\30\10"+
    "\17\0\11\10\1\134\4\10\5\0\1\10\7\0\30\10"+
    "\17\0\16\10\5\0\1\10\7\0\1\202\27\10\20\0"+
    "\1\144\3\0\3\144\2\0\1\203\2\0\1\144\1\66"+
    "\20\0\1\144\2\0\1\144\1\0\1\144\4\0\1\144"+
    "\7\0\1\144\12\0\33\146\1\150\46\146\32\204\1\104"+
    "\1\205\46\204\32\104\1\206\1\207\46\104\6\0\10\10"+
    "\1\210\5\10\5\0\1\10\7\0\30\10\17\0\5\10"+
    "\1\211\10\10\5\0\1\10\7\0\30\10\17\0\10\10"+
    "\1\212\5\10\5\0\1\10\7\0\30\10\17\0\10\10"+
    "\1\213\5\10\5\0\1\10\7\0\30\10\17\0\16\10"+
    "\5\0\1\10\7\0\7\10\1\214\20\10\17\0\16\10"+
    "\5\0\1\10\7\0\4\10\1\215\23\10\17\0\7\10"+
    "\1\216\6\10\5\0\1\10\7\0\30\10\17\0\10\10"+
    "\1\217\5\10\5\0\1\10\7\0\30\10\17\0\11\10"+
    "\1\220\4\10\5\0\1\10\7\0\30\10\17\0\11\10"+
    "\1\221\4\10\5\0\1\10\7\0\30\10\17\0\10\10"+
    "\1\222\5\10\5\0\1\10\7\0\30\10\17\0\16\10"+
    "\5\0\1\10\7\0\16\10\1\223\11\10\17\0\16\10"+
    "\5\0\1\10\7\0\3\10\1\224\24\10\17\0\16\10"+
    "\5\0\1\10\7\0\4\10\1\225\23\10\17\0\10\10"+
    "\1\226\5\10\5\0\1\10\7\0\30\10\17\0\16\10"+
    "\5\0\1\10\7\0\26\10\1\227\1\10\17\0\16\10"+
    "\5\0\1\10\7\0\26\10\1\230\1\10\13\0\1\231"+
    "\3\0\16\172\5\0\1\172\7\0\30\172\20\0\1\173"+
    "\3\0\3\173\2\0\1\232\2\0\1\173\1\66\20\0"+
    "\1\173\2\0\1\173\1\0\1\173\4\0\1\173\7\0"+
    "\1\173\21\0\1\233\3\0\3\233\2\0\1\233\2\0"+
    "\1\233\21\0\1\233\2\0\1\233\1\0\1\233\4\0"+
    "\1\233\7\0\1\233\20\0\3\10\1\234\12\10\5\0"+
    "\1\10\7\0\30\10\17\0\16\10\5\0\1\10\7\0"+
    "\3\10\1\235\24\10\17\0\16\10\5\0\1\10\7\0"+
    "\3\10\1\236\24\10\20\0\1\144\3\0\3\144\2\0"+
    "\1\203\2\131\1\144\1\66\20\0\1\144\2\0\1\144"+
    "\1\0\1\144\4\0\1\144\7\0\1\144\12\0\33\204"+
    "\1\205\100\204\1\206\1\205\46\204\32\146\1\237\1\150"+
    "\46\146\6\0\5\10\1\240\10\10\5\0\1\10\7\0"+
    "\30\10\17\0\3\10\1\241\12\10\5\0\1\10\7\0"+
    "\30\10\17\0\4\10\1\242\11\10\5\0\1\10\7\0"+
    "\30\10\17\0\10\10\1\243\5\10\5\0\1\10\7\0"+
    "\30\10\17\0\16\10\5\0\1\10\7\0\14\10\1\244"+
    "\13\10\17\0\11\10\1\245\4\10\5\0\1\10\7\0"+
    "\30\10\17\0\2\10\1\246\13\10\5\0\1\10\7\0"+
    "\30\10\17\0\5\10\1\247\10\10\5\0\1\10\7\0"+
    "\30\10\17\0\3\10\1\250\12\10\5\0\1\10\7\0"+
    "\30\10\17\0\2\10\1\251\13\10\5\0\1\10\7\0"+
    "\30\10\17\0\16\10\5\0\1\10\7\0\22\10\1\252"+
    "\1\253\4\10\17\0\16\10\5\0\1\10\7\0\6\10"+
    "\1\254\21\10\17\0\16\10\5\0\1\10\7\0\17\10"+
    "\1\255\10\10\17\0\16\10\5\0\1\10\7\0\17\10"+
    "\1\256\10\10\20\0\1\173\3\0\3\173\2\0\1\232"+
    "\2\131\1\173\1\66\20\0\1\173\2\0\1\173\1\0"+
    "\1\173\4\0\1\173\7\0\1\173\21\0\1\233\3\0"+
    "\3\233\2\0\1\257\2\0\1\233\21\0\1\233\2\0"+
    "\1\233\1\0\1\233\4\0\1\233\7\0\1\233\20\0"+
    "\16\10\5\0\1\10\7\0\3\10\1\260\24\10\17\0"+
    "\16\10\5\0\1\10\7\0\4\10\1\261\23\10\17\0"+
    "\16\10\5\0\1\10\7\0\10\10\1\262\17\10\43\0"+
    "\1\263\55\0\16\10\5\0\1\10\7\0\1\10\1\264"+
    "\26\10\17\0\6\10\1\265\7\10\5\0\1\10\7\0"+
    "\30\10\17\0\16\10\5\0\1\10\7\0\4\10\1\266"+
    "\23\10\17\0\5\10\1\267\10\10\5\0\1\10\7\0"+
    "\30\10\17\0\3\10\1\270\12\10\5\0\1\10\7\0"+
    "\30\10\17\0\16\10\5\0\1\10\7\0\3\10\1\271"+
    "\24\10\17\0\16\10\5\0\1\10\7\0\1\272\27\10"+
    "\17\0\16\10\5\0\1\10\7\0\11\10\1\273\16\10"+
    "\17\0\2\10\1\274\13\10\5\0\1\10\7\0\30\10"+
    "\17\0\2\10\1\275\13\10\5\0\1\10\7\0\30\10"+
    "\20\0\1\233\3\0\3\233\2\0\1\257\2\174\1\233"+
    "\21\0\1\233\2\0\1\233\1\0\1\233\4\0\1\233"+
    "\7\0\1\233\20\0\11\10\1\276\4\10\5\0\1\10"+
    "\7\0\30\10\11\0\32\277\1\300\1\301\46\277\6\0"+
    "\5\10\1\302\10\10\5\0\1\10\7\0\30\10\17\0"+
    "\7\10\1\303\6\10\5\0\1\10\7\0\30\10\17\0"+
    "\5\10\1\304\10\10\5\0\1\10\7\0\30\10\17\0"+
    "\7\10\1\305\6\10\5\0\1\10\7\0\30\10\17\0"+
    "\2\10\1\306\13\10\5\0\1\10\7\0\30\10\17\0"+
    "\16\10\5\0\1\10\7\0\3\10\1\307\24\10\17\0"+
    "\5\10\1\310\10\10\5\0\1\10\7\0\30\10\17\0"+
    "\5\10\1\311\10\10\5\0\1\10\7\0\30\10\11\0"+
    "\33\277\1\301\46\277\32\263\1\0\47\263\6\0\16\10"+
    "\5\0\1\10\7\0\3\10\1\312\24\10\17\0\16\10"+
    "\5\0\1\10\7\0\11\10\1\313\16\10\17\0\16\10"+
    "\5\0\1\10\7\0\17\10\1\314\10\10\17\0\5\10"+
    "\1\315\10\10\5\0\1\10\7\0\30\10\17\0\5\10"+
    "\1\316\10\10\5\0\1\10\7\0\30\10\17\0\2\10"+
    "\1\317\13\10\5\0\1\10\7\0\30\10\17\0\5\10"+
    "\1\320\10\10\5\0\1\10\7\0\30\10\17\0\16\10"+
    "\5\0\1\10\7\0\10\10\1\321\17\10\17\0\11\10"+
    "\1\322\4\10\5\0\1\10\7\0\30\10\17\0\5\10"+
    "\1\323\10\10\5\0\1\10\7\0\30\10\17\0\3\10"+
    "\1\324\12\10\5\0\1\10\7\0\30\10\11\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10428];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\15\1\1\11\1\1\2\11\1\1\1\11"+
    "\1\1\3\11\15\1\4\11\1\1\5\11\1\0\3\11"+
    "\1\1\1\0\10\1\2\0\1\11\1\0\2\1\1\11"+
    "\21\1\1\11\2\0\15\1\2\0\21\1\3\0\7\1"+
    "\2\0\1\11\22\1\1\11\1\0\45\1\2\0\23\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[212];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
//Developer´s extra code declaration
private Symbol symbol(int type){
	return new Symbol(type,yyline,yycolumn,yytext());
}

private Symbol symbol(int type,Object value){
	return new Symbol(type,yyline,yycolumn,value	);
}
private static int errorCounter=0;
public   boolean commentError=false;
class token{
	public String content="";
	public int line=0;
	public int column=0;
	public token(String aContent,int aLine,int aColumn){
			content=aContent;
			line=aLine;
			column=aColumn;
	}
}
class Yytoken{
		public Yytoken(){

		}
	}
public static ArrayList<String>TokenList=new ArrayList<String>();
private static String  addsTabs(int tokenLength){
	String tabs="";
	for(int i=32-tokenLength;i>0;i--){
		tabs+=" ";
	}
	return tabs;

}
public static String CreateTokenLog(Boolean isError,String token, int lineNumber,int columnNumber,String description){
	String newToken=token+addsTabs(token.length())+"\t\tLine Number: "+(lineNumber+1)+"\t"+"Column Number: "+(columnNumber)+" To: "+getLastColumn(columnNumber,token.length())+"\tToken Type: "+description+" Token: "+token+"\n";

	String ErrorToken=token+addsTabs(token.length())+"\t\tError at line: "+(lineNumber+1)+"\tDescription: "+description+"\n";

	return isError?ErrorToken:newToken;
}
public static int getLastColumn(int firstColumns,int tokenLength){
	return firstColumns+tokenLength;
}
public static void CreateOutputFile(String outputPath) throws IOException{
	FileWriter writer = null; 
      try {
          writer = new FileWriter(outputPath);
      } catch (IOException ex) {
          System.out.println("Something wrong happened with the output file...");
      }
for(String str: TokenList) {
  writer.write(str);
}
writer.close();
System.out.println("Done!");
if(errorCounter==0){
	System.out.println("The file contains no errors, This file is a cs file");
}
else{
	System.out.println("The file contains "+errorCounter+" errors, This is not a cs file");
}
}




  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Analyzer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 242) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { TokenList.add(CreateTokenLog(true,yytext(),yyline,yycolumn,"UNRECOGNIZED CHARACTER")); errorCounter+=1;
				System.out.println("Caracter no reconocido en la linea: "+yyline+" columna: "+yycolumn+" caracter: "+yytext());
            }
          case 62: break;
          case 2: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,yytext()));
							return new Symbol(sym.comp,yycolumn,yyline,yytext());
            }
          case 63: break;
          case 3: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,"="));
							return new Symbol(sym.equal,yycolumn,yyline,yytext());
            }
          case 64: break;
          case 4: 
            { /*TokenList.add(CreateTokenLog(false,yytext(),yyline,yycolumn,"WHITE_SPACE"));*/
            }
          case 65: break;
          case 5: 
            { if(yytext().length()>31){
			
							TokenList.add(CreateTokenLog(true,yytext().substring(0,30),yyline,yycolumn,"IDENTIFIER_TO_LONG,_MAX_SIZE_31_CHARACTERS"));
							errorCounter+=1;
						}
						else{
							TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,"IDENTIFIER"));
							return new Symbol(sym.IDENT,yycolumn,yyline,yytext());
						}
            }
          case 66: break;
          case 6: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,"INTEGER"));
							return new Symbol(sym.INTCONSTANT,yycolumn,yyline,Integer.parseInt(yytext()));
            }
          case 67: break;
          case 7: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,"."));
						return new Symbol(sym.dot,yycolumn,yyline,yytext());
            }
          case 68: break;
          case 8: 
            { /*Do nothing...*/
            }
          case 69: break;
          case 9: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,"DIV"));
						return new Symbol(sym.T_div,yycolumn,yyline,yytext());
            }
          case 70: break;
          case 10: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,"MUL"));
							return new Symbol(sym.T_mul,yycolumn,yyline,yytext());
            }
          case 71: break;
          case 11: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,"!"));
							return new Symbol(sym.exclamation,yycolumn,yyline,yytext());
            }
          case 72: break;
          case 12: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,"PLUS"));
							return new Symbol(sym.T_plus,yycolumn,yyline,yytext());
            }
          case 73: break;
          case 13: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,"MOD"));
							return new Symbol(sym.T_mod,yycolumn,yyline,yytext());
            }
          case 74: break;
          case 14: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,yytext()));
							return new Symbol(sym.minus,yycolumn,yyline,yytext());
            }
          case 75: break;
          case 15: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,"#"));
						return new Symbol(sym.numeral,yycolumn,yyline,yytext());
            }
          case 76: break;
          case 16: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,";"));
						return new Symbol(sym.semicolon,yycolumn,yyline,yytext());
            }
          case 77: break;
          case 17: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,"("));
						return new Symbol(sym.leftparen,yycolumn,yyline,yytext());
            }
          case 78: break;
          case 18: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,")"));
						return new Symbol(sym.rightparen,yycolumn,yyline,yytext());
            }
          case 79: break;
          case 19: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,"["));
						return new Symbol(sym.leftsquarebrace,yycolumn,yyline,yytext());
            }
          case 80: break;
          case 20: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,"]"));
						return new Symbol(sym.rightsquarebrace,yycolumn,yyline,yytext());
            }
          case 81: break;
          case 21: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,"{"));
						return new Symbol(sym.leftbrace,yycolumn,yyline,yytext());
            }
          case 82: break;
          case 22: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,"}"));
						return new Symbol(sym.rightbrace,yycolumn,yyline,yytext());
            }
          case 83: break;
          case 23: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,","));
						return new Symbol(sym.comma,yycolumn,yyline,yytext());
            }
          case 84: break;
          case 24: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,"=="));
							return new Symbol(sym.T_EQUAL,yycolumn,yyline,yytext());
            }
          case 85: break;
          case 25: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,"T_AND"));
							return new Symbol(sym.T_AND,yycolumn,yyline,yytext());
            }
          case 86: break;
          case 26: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,"T_OR"));
							return new Symbol(sym.T_OR,yycolumn,yyline,yytext());
            }
          case 87: break;
          case 27: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,"STRING"));
							return new Symbol(sym.STRINGCONSTANT,yycolumn,yyline,yytext().replace("\"",""));
            }
          case 88: break;
          case 28: 
            { 
            }
          case 89: break;
          case 29: 
            { TokenList.add(CreateTokenLog(true,yytext(),yyline,yycolumn,"MULTILINE_COMMENT_ERROR_MISSING *\\"));errorCounter+=1;
            }
          case 90: break;
          case 30: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,"!="));
							return new Symbol(sym.T_NOTEQUAL,yycolumn,yyline,yytext());
            }
          case 91: break;
          case 31: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,"if"));
						return new Symbol(sym.IF,yycolumn,yyline,yytext());
            }
          case 92: break;
          case 32: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,"[]"));
						return new Symbol(sym.brackets,yycolumn,yyline,yytext());
            }
          case 93: break;
          case 33: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,"DOUBLE"));
							return new Symbol(sym.DOUBLECONSTANT,yycolumn,yyline,Double.valueOf(yytext()));
            }
          case 94: break;
          case 34: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,"for"));
						return new Symbol(sym.FOR,yycolumn,yyline,yytext());
            }
          case 95: break;
          case 35: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,"int"));
						return new Symbol(sym.INT,yycolumn,yyline,yytext());
            }
          case 96: break;
          case 36: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,"New"));
						return new Symbol(sym.New,yycolumn,yyline,yytext());
            }
          case 97: break;
          case 37: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,"BOOLEAN"));
							boolean t=yytext().contains("true");
							return new Symbol(sym.BOOLEANCONSTANT,yycolumn,yyline,t);
            }
          case 98: break;
          case 38: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,"this"));
						return new Symbol(sym.THIS,yycolumn,yyline,yytext());
            }
          case 99: break;
          case 39: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,"else"));
						return new Symbol(sym.else_t,yycolumn,yyline,yytext());
            }
          case 100: break;
          case 40: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,"null"));
						return new Symbol(sym.NULL,yycolumn,yyline,yytext());
            }
          case 101: break;
          case 41: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,"void"));
						return new Symbol(sym.VOID,yycolumn,yyline,yytext());
            }
          case 102: break;
          case 42: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,"bool"));
						return new Symbol(sym.BOOL,yycolumn,yyline,yytext());
            }
          case 103: break;
          case 43: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,yytext()));
						return new Symbol(sym.T_includepath,yycolumn,yyline,yytext());
            }
          case 104: break;
          case 44: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,"break"));
						return new Symbol(sym.BREAK,yycolumn,yyline,yytext());
            }
          case 105: break;
          case 45: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,"class"));
						return new Symbol(sym.CLASS,yycolumn,yyline,yytext());
            }
          case 106: break;
          case 46: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,"const"));
						return new Symbol(sym.T_const,yycolumn,yyline,yytext());
            }
          case 107: break;
          case 47: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,"while"));
						return new Symbol(sym.WHILE,yycolumn,yyline,yytext());
            }
          case 108: break;
          case 48: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,"Print"));
						return new Symbol(sym.Print,yycolumn,yyline,yytext());
            }
          case 109: break;
          case 49: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,"return"));
						return new Symbol(sym.RETURN,yycolumn,yyline,yytext());
            }
          case 110: break;
          case 50: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,"string"));
						return new Symbol(sym.STRING,yycolumn,yyline,yytext());
            }
          case 111: break;
          case 51: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,"double"));
						return new Symbol(sym.DOUBLE,yycolumn,yyline,yytext());
            }
          case 112: break;
          case 52: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,"Malloc"));
						return new Symbol(sym.Malloc,yycolumn,yyline,yytext());
            }
          case 113: break;
          case 53: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,"extends"));
						return new Symbol(sym.extends_t,yycolumn,yyline,yytext());
            }
          case 114: break;
          case 54: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,"include"));
						return new Symbol(sym.T_include,yycolumn,yyline,yytext());
            }
          case 115: break;
          case 55: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,"getByte"));
						return new Symbol(sym.getByte,yycolumn,yyline,yytext());
            }
          case 116: break;
          case 56: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,"setByte"));
						return new Symbol(sym.SetByte,yycolumn,yyline,yytext());
            }
          case 117: break;
          case 57: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,"NewArray"));
						return new Symbol(sym.NewArray,yycolumn,yyline,yytext());
            }
          case 118: break;
          case 58: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,"ReadLine"));
						return new Symbol(sym.ReadLine,yycolumn,yyline,yytext());
            }
          case 119: break;
          case 59: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,"interface"));
						return new Symbol(sym.interface_t,yycolumn,yyline,yytext());
            }
          case 120: break;
          case 60: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,"implements"));
						return new Symbol(sym.implements_t,yycolumn,yyline,yytext());
            }
          case 121: break;
          case 61: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,"ReadInteger"));
						return new Symbol(sym.ReadInteger,yycolumn,yyline,yytext());
            }
          case 122: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
