/* The following code was generated by JFlex 1.6.1 */

//packages
package minicsharp;
import java.util.ArrayList;
import java.io.FileWriter;
import java.io.IOException;
import java_cup.runtime.Symbol;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>miniCsharp.jflex</tt>
 */
public class Analyzer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\35\1\33\1\35\1\35\1\35\22\0\1\35\1\11\1\32"+
    "\2\0\1\4\1\7\1\0\1\64\1\65\1\2\1\1\1\72\1\1"+
    "\1\30\1\3\1\24\7\13\2\13\1\0\1\63\1\6\1\5\1\6"+
    "\2\0\1\54\3\27\1\31\1\27\2\12\1\60\2\12\1\61\1\62"+
    "\1\53\1\12\1\56\1\12\1\57\5\12\1\26\2\12\1\66\1\34"+
    "\1\67\1\0\1\12\1\0\1\21\1\45\1\47\1\42\1\17\1\20"+
    "\1\46\1\50\1\36\1\12\1\52\1\22\1\37\1\41\1\44\1\40"+
    "\1\12\1\15\1\23\1\14\1\16\1\43\1\51\1\25\1\55\1\12"+
    "\1\70\1\10\1\71\1\0\6\12\1\12\32\12\1\12\137\12\u1580\0"+
    "\1\35\u097f\0\13\35\35\0\1\35\1\35\5\0\1\35\57\0\1\35"+
    "\u0fa0\0\1\35\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\ud00f\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\3\2\1\3\1\4\1\1\1\5\1\6"+
    "\1\7\1\10\5\7\1\10\1\11\1\1\1\12\1\5"+
    "\13\7\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\3\1\23\1\0\1\4\1\24\7\7\2\0"+
    "\1\25\1\0\1\26\15\7\1\23\2\0\1\27\4\24"+
    "\7\7\1\10\1\25\1\7\1\30\7\7\1\31\3\7"+
    "\1\23\1\32\2\0\1\24\1\0\1\33\1\34\1\7"+
    "\1\35\4\7\1\36\1\7\1\37\1\7\1\40\6\7"+
    "\1\32\1\0\1\24\6\7\1\41\1\42\1\43\1\7"+
    "\1\44\3\7\1\23\2\24\1\45\1\7\1\46\2\7"+
    "\1\47\3\7\1\50\1\23\2\0\1\24\1\51\7\7"+
    "\1\52\1\7\1\53\1\7\1\54\1\7\1\55\1\7"+
    "\1\56";

  private static int [] zzUnpackAction() {
    int [] result = new int[177];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\166\0\261\0\73\0\354\0\354\0\u0127"+
    "\0\u0162\0\354\0\u019d\0\u01d8\0\u0213\0\u024e\0\u0289\0\u02c4"+
    "\0\u02ff\0\u033a\0\73\0\u0375\0\73\0\73\0\u03b0\0\u03eb"+
    "\0\u0426\0\u0461\0\u049c\0\u04d7\0\u0512\0\u054d\0\u0588\0\u05c3"+
    "\0\u05fe\0\73\0\73\0\73\0\73\0\73\0\73\0\73"+
    "\0\73\0\73\0\u0639\0\u0674\0\73\0\u06af\0\u06ea\0\u0725"+
    "\0\u0760\0\u079b\0\u07d6\0\u0811\0\u084c\0\u0887\0\u0375\0\73"+
    "\0\u08c2\0\u019d\0\u08fd\0\u0938\0\u0973\0\u09ae\0\u09e9\0\u0a24"+
    "\0\u0a5f\0\u0a9a\0\u0ad5\0\u0b10\0\u0b4b\0\u0b86\0\u0bc1\0\u0bfc"+
    "\0\u0c37\0\u0c72\0\73\0\u0cad\0\u0ce8\0\u0d23\0\u0d5e\0\u0d99"+
    "\0\u0dd4\0\u0e0f\0\u0e4a\0\u0e85\0\u0ec0\0\u0efb\0\u0887\0\u0375"+
    "\0\u0f36\0\u0f71\0\u0fac\0\u0fe7\0\u1022\0\u105d\0\u1098\0\u10d3"+
    "\0\u110e\0\u1149\0\u1184\0\u11bf\0\u11fa\0\u1235\0\73\0\u1270"+
    "\0\u12ab\0\u12e6\0\u1321\0\u019d\0\u019d\0\u135c\0\u019d\0\u1397"+
    "\0\u13d2\0\u140d\0\u1448\0\u019d\0\u1483\0\u019d\0\u14be\0\u019d"+
    "\0\u14f9\0\u1534\0\u156f\0\u15aa\0\u15e5\0\u1620\0\u165b\0\u1696"+
    "\0\u16d1\0\u170c\0\u1747\0\u1782\0\u17bd\0\u17f8\0\u1833\0\u019d"+
    "\0\u019d\0\u019d\0\u186e\0\u019d\0\u18a9\0\u18e4\0\u191f\0\u195a"+
    "\0\u1995\0\u19d0\0\u019d\0\u1a0b\0\u019d\0\u1a46\0\u1a81\0\u019d"+
    "\0\u1abc\0\u1af7\0\u1b32\0\u019d\0\u1b6d\0\u1ba8\0\u165b\0\u1be3"+
    "\0\u019d\0\u1c1e\0\u1c59\0\u1c94\0\u1ccf\0\u1d0a\0\u1d45\0\u1d80"+
    "\0\u019d\0\u1dbb\0\u019d\0\u1df6\0\u019d\0\u1e31\0\u019d\0\u1e6c"+
    "\0\u019d";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[177];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\13\1\17\1\20"+
    "\2\13\1\21\1\22\3\13\1\23\1\13\1\24\1\25"+
    "\1\2\1\26\1\27\2\13\1\30\1\31\1\32\1\13"+
    "\1\33\1\13\1\34\1\13\1\35\1\13\1\36\2\13"+
    "\1\37\1\40\2\13\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\100\0\1\52\67\0\1\53"+
    "\1\54\1\0\1\52\72\0\1\55\74\0\1\55\73\0"+
    "\1\55\74\0\16\13\1\0\1\13\4\0\25\13\23\0"+
    "\1\14\10\0\1\14\3\0\1\56\54\0\3\13\1\57"+
    "\12\13\1\0\1\13\4\0\12\13\1\60\12\13\22\0"+
    "\5\13\1\61\10\13\1\0\1\13\4\0\25\13\22\0"+
    "\10\13\1\62\2\13\1\63\2\13\1\0\1\13\4\0"+
    "\25\13\22\0\7\13\1\64\6\13\1\0\1\13\4\0"+
    "\25\13\22\0\2\13\1\65\13\13\1\0\1\13\4\0"+
    "\25\13\23\0\1\14\10\0\1\14\2\66\1\0\1\56"+
    "\42\0\32\67\1\70\1\0\1\71\36\67\12\0\6\13"+
    "\1\72\7\13\1\0\1\13\4\0\1\13\1\73\1\13"+
    "\1\74\21\13\22\0\4\13\1\75\11\13\1\0\1\13"+
    "\4\0\25\13\22\0\16\13\1\0\1\13\4\0\6\13"+
    "\1\76\16\13\22\0\16\13\1\0\1\13\4\0\6\13"+
    "\1\77\16\13\22\0\3\13\1\100\12\13\1\0\1\13"+
    "\4\0\6\13\1\101\16\13\22\0\10\13\1\102\5\13"+
    "\1\0\1\13\4\0\25\13\22\0\16\13\1\0\1\13"+
    "\4\0\12\13\1\103\12\13\22\0\5\13\1\104\10\13"+
    "\1\0\1\13\4\0\25\13\22\0\3\13\1\105\12\13"+
    "\1\0\1\13\4\0\25\13\22\0\5\13\1\106\10\13"+
    "\1\0\1\13\4\0\25\13\22\0\7\13\1\107\6\13"+
    "\1\0\1\13\4\0\25\13\10\0\2\110\1\111\1\112"+
    "\67\110\33\54\1\113\37\54\1\0\1\114\11\0\1\56"+
    "\3\0\1\115\4\0\1\116\3\0\1\117\1\115\53\0"+
    "\4\13\1\120\11\13\1\0\1\13\4\0\25\13\22\0"+
    "\16\13\1\0\1\13\4\0\1\121\24\13\22\0\2\13"+
    "\1\122\13\13\1\0\1\13\4\0\25\13\22\0\11\13"+
    "\1\123\4\13\1\0\1\13\4\0\25\13\22\0\2\13"+
    "\1\124\13\13\1\0\1\13\4\0\25\13\22\0\10\13"+
    "\1\125\5\13\1\0\1\13\4\0\25\13\22\0\3\13"+
    "\1\126\12\13\1\0\1\13\4\0\25\13\23\0\1\127"+
    "\3\0\3\127\2\0\1\127\2\0\1\127\1\0\1\127"+
    "\10\0\1\127\2\0\1\127\1\0\1\127\4\0\1\127"+
    "\16\0\32\67\1\130\1\0\1\71\36\67\12\0\16\13"+
    "\1\0\1\13\4\0\2\13\1\131\22\13\22\0\2\13"+
    "\1\132\13\13\1\0\1\13\4\0\25\13\22\0\10\13"+
    "\1\133\5\13\1\0\1\13\4\0\25\13\22\0\4\13"+
    "\1\134\11\13\1\0\1\13\4\0\25\13\22\0\16\13"+
    "\1\0\1\13\4\0\1\135\24\13\22\0\5\13\1\136"+
    "\10\13\1\0\1\13\4\0\25\13\22\0\16\13\1\0"+
    "\1\13\4\0\6\13\1\137\16\13\22\0\7\13\1\140"+
    "\6\13\1\0\1\13\4\0\25\13\22\0\16\13\1\0"+
    "\1\13\4\0\1\141\24\13\22\0\16\13\1\0\1\13"+
    "\4\0\13\13\1\142\11\13\22\0\16\13\1\0\1\13"+
    "\4\0\1\143\24\13\22\0\7\13\1\144\6\13\1\0"+
    "\1\13\4\0\25\13\22\0\10\13\1\145\5\13\1\0"+
    "\1\13\4\0\25\13\10\0\2\110\1\111\70\110\2\53"+
    "\1\146\1\147\67\53\2\150\1\151\1\53\67\150\13\0"+
    "\1\114\10\0\1\152\3\0\1\117\43\0\1\114\11\0"+
    "\1\114\10\0\1\152\3\0\1\117\43\0\1\114\11\0"+
    "\1\56\3\0\1\115\4\0\1\116\2\153\1\0\1\117"+
    "\1\115\54\0\1\117\10\0\1\117\60\0\5\13\1\154"+
    "\10\13\1\0\1\13\4\0\25\13\22\0\11\13\1\155"+
    "\4\13\1\0\1\13\4\0\25\13\22\0\4\13\1\156"+
    "\11\13\1\0\1\13\4\0\25\13\22\0\5\13\1\157"+
    "\10\13\1\0\1\13\4\0\25\13\22\0\5\13\1\160"+
    "\10\13\1\0\1\13\4\0\25\13\22\0\11\13\1\120"+
    "\4\13\1\0\1\13\4\0\25\13\22\0\16\13\1\0"+
    "\1\13\4\0\1\161\24\13\22\0\10\13\1\162\5\13"+
    "\1\0\1\13\4\0\25\13\22\0\5\13\1\163\10\13"+
    "\1\0\1\13\4\0\25\13\22\0\10\13\1\164\5\13"+
    "\1\0\1\13\4\0\25\13\22\0\16\13\1\0\1\13"+
    "\4\0\7\13\1\165\15\13\22\0\16\13\1\0\1\13"+
    "\4\0\4\13\1\166\20\13\22\0\7\13\1\167\6\13"+
    "\1\0\1\13\4\0\25\13\22\0\10\13\1\170\5\13"+
    "\1\0\1\13\4\0\25\13\22\0\11\13\1\171\4\13"+
    "\1\0\1\13\4\0\25\13\22\0\10\13\1\172\5\13"+
    "\1\0\1\13\4\0\25\13\22\0\16\13\1\0\1\13"+
    "\4\0\16\13\1\173\6\13\22\0\16\13\1\0\1\13"+
    "\4\0\3\13\1\174\21\13\22\0\16\13\1\0\1\13"+
    "\4\0\4\13\1\175\20\13\22\0\10\13\1\176\5\13"+
    "\1\0\1\13\4\0\25\13\10\0\2\110\1\111\1\177"+
    "\67\110\2\150\1\151\72\150\1\151\1\147\67\150\13\0"+
    "\1\114\10\0\1\152\2\200\1\0\1\117\55\0\1\201"+
    "\3\0\3\201\2\0\1\201\2\0\1\201\1\0\1\201"+
    "\10\0\1\201\2\0\1\201\1\0\1\201\4\0\1\201"+
    "\30\0\3\13\1\202\12\13\1\0\1\13\4\0\25\13"+
    "\22\0\16\13\1\0\1\13\4\0\3\13\1\203\21\13"+
    "\22\0\16\13\1\0\1\13\4\0\3\13\1\204\21\13"+
    "\22\0\5\13\1\205\10\13\1\0\1\13\4\0\25\13"+
    "\22\0\3\13\1\206\12\13\1\0\1\13\4\0\25\13"+
    "\22\0\10\13\1\207\5\13\1\0\1\13\4\0\25\13"+
    "\22\0\16\13\1\0\1\13\4\0\14\13\1\210\10\13"+
    "\22\0\11\13\1\211\4\13\1\0\1\13\4\0\25\13"+
    "\22\0\5\13\1\212\10\13\1\0\1\13\4\0\25\13"+
    "\22\0\3\13\1\213\12\13\1\0\1\13\4\0\25\13"+
    "\22\0\2\13\1\214\13\13\1\0\1\13\4\0\25\13"+
    "\22\0\16\13\1\0\1\13\4\0\22\13\1\215\1\216"+
    "\1\13\22\0\16\13\1\0\1\13\4\0\6\13\1\217"+
    "\16\13\13\0\1\220\102\0\1\221\3\0\3\221\2\0"+
    "\1\221\2\0\1\221\1\0\1\221\10\0\1\221\2\0"+
    "\1\221\1\0\1\221\4\0\1\221\17\0\1\114\11\0"+
    "\1\201\3\0\3\201\2\0\1\222\2\0\1\201\1\117"+
    "\1\201\10\0\1\201\2\0\1\201\1\0\1\201\4\0"+
    "\1\201\30\0\16\13\1\0\1\13\4\0\3\13\1\223"+
    "\21\13\22\0\16\13\1\0\1\13\4\0\4\13\1\224"+
    "\20\13\22\0\16\13\1\0\1\13\4\0\10\13\1\225"+
    "\14\13\22\0\16\13\1\0\1\13\4\0\1\13\1\226"+
    "\23\13\22\0\6\13\1\227\7\13\1\0\1\13\4\0"+
    "\25\13\22\0\5\13\1\230\10\13\1\0\1\13\4\0"+
    "\25\13\22\0\3\13\1\231\12\13\1\0\1\13\4\0"+
    "\25\13\22\0\16\13\1\0\1\13\4\0\3\13\1\232"+
    "\21\13\22\0\16\13\1\0\1\13\4\0\1\233\24\13"+
    "\22\0\16\13\1\0\1\13\4\0\11\13\1\234\13\13"+
    "\10\0\2\235\1\236\1\237\67\235\13\0\1\221\3\0"+
    "\3\221\2\0\1\240\2\0\1\221\1\117\1\221\10\0"+
    "\1\221\2\0\1\221\1\0\1\221\4\0\1\221\17\0"+
    "\1\114\11\0\1\201\3\0\3\201\2\0\1\222\2\153"+
    "\1\201\1\117\1\201\10\0\1\201\2\0\1\201\1\0"+
    "\1\201\4\0\1\201\30\0\11\13\1\241\4\13\1\0"+
    "\1\13\4\0\25\13\22\0\5\13\1\242\10\13\1\0"+
    "\1\13\4\0\25\13\22\0\7\13\1\243\6\13\1\0"+
    "\1\13\4\0\25\13\22\0\7\13\1\244\6\13\1\0"+
    "\1\13\4\0\25\13\22\0\2\13\1\245\13\13\1\0"+
    "\1\13\4\0\25\13\22\0\16\13\1\0\1\13\4\0"+
    "\3\13\1\246\21\13\10\0\2\235\1\236\70\235\3\220"+
    "\1\0\67\220\13\0\1\221\3\0\3\221\2\0\1\240"+
    "\2\200\1\221\1\117\1\221\10\0\1\221\2\0\1\221"+
    "\1\0\1\221\4\0\1\221\30\0\16\13\1\0\1\13"+
    "\4\0\3\13\1\247\21\13\22\0\16\13\1\0\1\13"+
    "\4\0\11\13\1\250\13\13\22\0\16\13\1\0\1\13"+
    "\4\0\17\13\1\251\5\13\22\0\5\13\1\252\10\13"+
    "\1\0\1\13\4\0\25\13\22\0\5\13\1\253\10\13"+
    "\1\0\1\13\4\0\25\13\22\0\2\13\1\254\13\13"+
    "\1\0\1\13\4\0\25\13\22\0\5\13\1\255\10\13"+
    "\1\0\1\13\4\0\25\13\22\0\16\13\1\0\1\13"+
    "\4\0\10\13\1\256\14\13\22\0\11\13\1\257\4\13"+
    "\1\0\1\13\4\0\25\13\22\0\5\13\1\260\10\13"+
    "\1\0\1\13\4\0\25\13\22\0\3\13\1\261\12\13"+
    "\1\0\1\13\4\0\25\13\10\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7847];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\15\1\1\11\1\1\2\11"+
    "\13\1\11\11\1\1\1\0\1\11\10\1\2\0\1\11"+
    "\1\0\17\1\2\0\1\11\33\1\1\11\2\0\1\1"+
    "\1\0\24\1\1\0\35\1\2\0\22\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[177];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
//Developer´s extra code declaration
private Symbol symbol(int type){
	return new Symbol(type,yyline,yycolumn,yytext());
}

private Symbol symbol(int type,Object value){
	return new Symbol(type,yyline,yycolumn,value	);
}
private static int errorCounter=0;
public   boolean commentError=false;
class token{
	public String content="";
	public int line=0;
	public int column=0;
	public token(String aContent,int aLine,int aColumn){
			content=aContent;
			line=aLine;
			column=aColumn;
	}
}
class Yytoken{
		public Yytoken(){

		}
	}
public static ArrayList<String>TokenList=new ArrayList<String>();
private static String  addsTabs(int tokenLength){
	String tabs="";
	for(int i=32-tokenLength;i>0;i--){
		tabs+=" ";
	}
	return tabs;

}
public static String CreateTokenLog(Boolean isError,String token, int lineNumber,int columnNumber,String description){
	String newToken=token+addsTabs(token.length())+"\t\tLine Number: "+(lineNumber+1)+"\t"+"Column Number: "+(columnNumber)+" To: "+getLastColumn(columnNumber,token.length())+"\tToken Type: "+description+" Token: "+token+"\n";

	String ErrorToken=token+addsTabs(token.length())+"\t\tError at line: "+(lineNumber+1)+"\tDescription: "+description+"\n";

	return isError?ErrorToken:newToken;
}
public static int getLastColumn(int firstColumns,int tokenLength){
	return firstColumns+tokenLength;
}
public static void CreateOutputFile(String outputPath) throws IOException{
	FileWriter writer = null; 
      try {
          writer = new FileWriter(outputPath);
      } catch (IOException ex) {
          System.out.println("Something wrong happened with the output file...");
      }
for(String str: TokenList) {
  writer.write(str);
}
writer.close();
System.out.println("Done!");
if(errorCounter==0){
	System.out.println("The file contains no errors, This file is a cs file");
}
else{
	System.out.println("The file contains "+errorCounter+" errors, This is not a cs file");
}
}




  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Analyzer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 238) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { TokenList.add(CreateTokenLog(true,yytext(),yyline,yycolumn,"UNRECOGNIZED CHARACTER")); errorCounter+=1;
				System.out.println("Caracter no reconocido en la linea: "+yyline+" columna: "+yycolumn+" caracter: "+yytext());
            }
          case 47: break;
          case 2: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,yytext()));
							return new Symbol(sym.arit,yycolumn,yyline,yytext());
            }
          case 48: break;
          case 3: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,"="));
							return new Symbol(sym.equal,yycolumn,yyline,yytext());
            }
          case 49: break;
          case 4: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,yytext()));
							return new Symbol(sym.logic,yycolumn,yyline,yytext());
            }
          case 50: break;
          case 5: 
            { /*TokenList.add(CreateTokenLog(false,yytext(),yyline,yycolumn,"WHITE_SPACE"));*/
            }
          case 51: break;
          case 6: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,"!"));
							return new Symbol(sym.exclamation,yycolumn,yyline,yytext());
            }
          case 52: break;
          case 7: 
            { if(yytext().length()>31){
			
							TokenList.add(CreateTokenLog(true,yytext().substring(0,30),yyline,yycolumn,"IDENTIFIER_TO_LONG,_MAX_SIZE_31_CHARACTERS"));
							errorCounter+=1;
						}
						else{
							TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,"IDENTIFIER"));
							return new Symbol(sym.IDENT,yycolumn,yyline,yytext());
						}
            }
          case 53: break;
          case 8: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,"INTEGER"));
							return new Symbol(sym.INTCONSTANT,yycolumn,yyline,yytext());
            }
          case 54: break;
          case 9: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,"."));
						return new Symbol(sym.dot,yycolumn,yyline,yytext());
            }
          case 55: break;
          case 10: 
            { /*Do nothing...*/
            }
          case 56: break;
          case 11: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,";"));
						return new Symbol(sym.semicolon,yycolumn,yyline,yytext());
            }
          case 57: break;
          case 12: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,"("));
						return new Symbol(sym.leftparen,yycolumn,yyline,yytext());
            }
          case 58: break;
          case 13: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,")"));
						return new Symbol(sym.rightparen,yycolumn,yyline,yytext());
            }
          case 59: break;
          case 14: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,"["));
						return new Symbol(sym.leftsquarebrace,yycolumn,yyline,yytext());
            }
          case 60: break;
          case 15: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,"]"));
						return new Symbol(sym.rightsquarebrace,yycolumn,yyline,yytext());
            }
          case 61: break;
          case 16: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,"{"));
						return new Symbol(sym.leftbrace,yycolumn,yyline,yytext());
            }
          case 62: break;
          case 17: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,"}"));
						return new Symbol(sym.rightbrace,yycolumn,yyline,yytext());
            }
          case 63: break;
          case 18: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,","));
						return new Symbol(sym.comma,yycolumn,yyline,yytext());
            }
          case 64: break;
          case 19: 
            { TokenList.add(CreateTokenLog(true,yytext(),yyline,yycolumn,"MULTILINE_COMMENT_ERROR_MISSING *\\"));errorCounter+=1;
            }
          case 65: break;
          case 20: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,"DOUBLE"));
							return new Symbol(sym.DOUBLECONSTANT,yycolumn,yyline,yytext());
            }
          case 66: break;
          case 21: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,"STRING"));
							return new Symbol(sym.STRINGCONSTANT,yycolumn,yyline,yytext());
            }
          case 67: break;
          case 22: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,"if"));
						return new Symbol(sym.IF,yycolumn,yyline,yytext());
            }
          case 68: break;
          case 23: 
            { /*TokenList.add(CreateTokenLog(false,yytext(),yyline,yycolumn,"NORMAL_COMMENT"));*/
            }
          case 69: break;
          case 24: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,"int"));
						return new Symbol(sym.INT,yycolumn,yyline,yytext());
            }
          case 70: break;
          case 25: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,"New"));
						return new Symbol(sym.New,yycolumn,yyline,yytext());
            }
          case 71: break;
          case 26: 
            { /*TokenList.add(CreateTokenLog(false,yytext(),yyline,yycolumn,"MULTILINE_COMMENT"));*/
            }
          case 72: break;
          case 27: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,"BOOLEAN"));
							return new Symbol(sym.BOOLEANCONSTANT,yycolumn,yyline,yytext());
            }
          case 73: break;
          case 28: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,"this"));
						return new Symbol(sym.THIS,yycolumn,yyline,yytext());
            }
          case 74: break;
          case 29: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,"else"));
						return new Symbol(sym.else_t,yycolumn,yyline,yytext());
            }
          case 75: break;
          case 30: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,"null"));
						return new Symbol(sym.NULL,yycolumn,yyline,yytext());
            }
          case 76: break;
          case 31: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,"void"));
						return new Symbol(sym.VOID,yycolumn,yyline,yytext());
            }
          case 77: break;
          case 32: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,"bool"));
						return new Symbol(sym.BOOL,yycolumn,yyline,yytext());
            }
          case 78: break;
          case 33: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,"break"));
						return new Symbol(sym.BREAK,yycolumn,yyline,yytext());
            }
          case 79: break;
          case 34: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,"class"));
						return new Symbol(sym.CLASS,yycolumn,yyline,yytext());
            }
          case 80: break;
          case 35: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,"while"));
						return new Symbol(sym.WHILE,yycolumn,yyline,yytext());
            }
          case 81: break;
          case 36: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,"Print"));
						return new Symbol(sym.Print,yycolumn,yyline,yytext());
            }
          case 82: break;
          case 37: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,"return"));
						return new Symbol(sym.RETURN,yycolumn,yyline,yytext());
            }
          case 83: break;
          case 38: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,"string"));
						return new Symbol(sym.STRING,yycolumn,yyline,yytext());
            }
          case 84: break;
          case 39: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,"double"));
						return new Symbol(sym.DOUBLE,yycolumn,yyline,yytext());
            }
          case 85: break;
          case 40: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,"Malloc"));
						return new Symbol(sym.Malloc,yycolumn,yyline,yytext());
            }
          case 86: break;
          case 41: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,"extends"));
						return new Symbol(sym.extends_t,yycolumn,yyline,yytext());
            }
          case 87: break;
          case 42: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,"NewArray"));
						return new Symbol(sym.NewArray,yycolumn,yyline,yytext());
            }
          case 88: break;
          case 43: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,"ReadLine"));
						return new Symbol(sym.ReadLine,yycolumn,yyline,yytext());
            }
          case 89: break;
          case 44: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,"interface"));
						return new Symbol(sym.interface_t,yycolumn,yyline,yytext());
            }
          case 90: break;
          case 45: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,"implements"));
						return new Symbol(sym.implements_t,yycolumn,yyline,yytext());
            }
          case 91: break;
          case 46: 
            { TokenList.add(CreateTokenLog(commentError,yytext(),yyline,yycolumn,"ReadInteger"));
						return new Symbol(sym.ReadInteger,yycolumn,yyline,yytext());
            }
          case 92: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
