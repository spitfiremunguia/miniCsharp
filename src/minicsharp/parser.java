
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Nov 21 14:16:39 CST 2018
//----------------------------------------------------

package minicsharp;

import java_cup.runtime.Symbol;
import java.util.LinkedList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Nov 21 14:16:39 CST 2018
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\172\000\002\002\004\000\002\002\005\000\002\036" +
    "\004\000\002\036\002\000\002\037\005\000\002\004\004" +
    "\000\002\004\002\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\004\000\002" +
    "\003\004\000\002\005\004\000\002\047\004\000\002\047" +
    "\005\000\002\040\003\000\002\040\003\000\002\040\003" +
    "\000\002\040\003\000\002\040\003\000\002\040\004\000" +
    "\002\051\002\000\002\052\002\000\002\053\002\000\002" +
    "\006\013\000\002\054\002\000\002\055\002\000\002\056" +
    "\002\000\002\006\013\000\002\045\004\000\002\045\002" +
    "\000\002\046\005\000\002\046\002\000\002\057\002\000" +
    "\002\060\002\000\002\007\013\000\002\012\004\000\002" +
    "\012\002\000\002\013\004\000\002\013\002\000\002\035" +
    "\003\000\002\035\005\000\002\014\004\000\002\014\002" +
    "\000\002\015\003\000\002\015\003\000\002\010\007\000" +
    "\002\016\004\000\002\016\002\000\002\017\010\000\002" +
    "\017\010\000\002\011\006\000\002\020\004\000\002\020" +
    "\002\000\002\021\004\000\002\021\002\000\002\022\004" +
    "\000\002\022\003\000\002\022\003\000\002\022\003\000" +
    "\002\022\003\000\002\022\003\000\002\022\003\000\002" +
    "\022\003\000\002\022\003\000\002\044\003\000\002\044" +
    "\002\000\002\023\010\000\002\031\004\000\002\031\002" +
    "\000\002\024\007\000\002\025\013\000\002\061\002\000" +
    "\002\027\006\000\002\026\004\000\002\030\010\000\002" +
    "\062\002\000\002\032\006\000\002\032\002\000\002\043" +
    "\005\000\002\043\003\000\002\043\003\000\002\043\003" +
    "\000\002\043\003\000\002\063\002\000\002\043\006\000" +
    "\002\043\005\000\002\043\005\000\002\043\005\000\002" +
    "\043\005\000\002\043\005\000\002\043\005\000\002\043" +
    "\005\000\002\043\005\000\002\043\005\000\002\043\005" +
    "\000\002\043\004\000\002\043\004\000\002\043\006\000" +
    "\002\043\010\000\002\043\005\000\002\043\005\000\002" +
    "\043\006\000\002\042\003\000\002\042\005\000\002\042" +
    "\006\000\002\064\002\000\002\050\007\000\002\065\002" +
    "\000\002\050\011\000\002\050\010\000\002\034\006\000" +
    "\002\034\010\000\002\066\002\000\002\033\005\000\002" +
    "\033\002\000\002\041\003\000\002\041\003\000\002\041" +
    "\003\000\002\041\003\000\002\041\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\357\000\030\003\ufffe\011\ufffe\012\ufffe\017\ufffe\055" +
    "\ufffe\057\004\061\ufffe\062\ufffe\063\ufffe\064\ufffe\065\ufffe" +
    "\001\002\000\004\056\360\001\002\000\004\002\357\001" +
    "\002\000\026\003\027\011\020\012\030\017\017\055\013" +
    "\061\012\062\011\063\024\064\014\065\021\001\002\000" +
    "\030\003\ufffe\011\ufffe\012\ufffe\017\ufffe\055\ufffe\057\004" +
    "\061\ufffe\062\ufffe\063\ufffe\064\ufffe\065\ufffe\001\002\000" +
    "\026\003\uffff\011\uffff\012\uffff\017\uffff\055\uffff\061\uffff" +
    "\062\uffff\063\uffff\064\uffff\065\uffff\001\002\000\010\010" +
    "\ufff1\044\ufff1\061\ufff1\001\002\000\010\010\uffed\044\uffed" +
    "\061\uffed\001\002\000\014\061\012\062\011\063\024\064" +
    "\014\065\021\001\002\000\010\010\uffef\044\uffef\061\uffef" +
    "\001\002\000\030\002\ufff9\003\ufff9\011\ufff9\012\ufff9\017" +
    "\ufff9\055\ufff9\061\ufff9\062\ufff9\063\ufff9\064\ufff9\065\ufff9" +
    "\001\002\000\030\002\ufffa\003\ufffa\011\ufffa\012\ufffa\017" +
    "\ufffa\055\ufffa\061\ufffa\062\ufffa\063\ufffa\064\ufffa\065\ufffa" +
    "\001\002\000\004\061\334\001\002\000\004\061\324\001" +
    "\002\000\010\010\uffee\044\uffee\061\uffee\001\002\000\004" +
    "\004\323\001\002\000\030\002\ufff8\003\ufff8\011\ufff8\012" +
    "\ufff8\017\ufff8\055\ufff8\061\ufff8\062\ufff8\063\ufff8\064\ufff8" +
    "\065\ufff8\001\002\000\010\010\ufff0\044\ufff0\061\ufff0\001" +
    "\002\000\006\044\061\061\060\001\002\000\030\002\ufffb" +
    "\003\ufffb\011\ufffb\012\ufffb\017\ufffb\055\ufffb\061\ufffb\062" +
    "\ufffb\063\ufffb\064\ufffb\065\ufffb\001\002\000\006\004\054" +
    "\014\055\001\002\000\004\061\032\001\002\000\030\002" +
    "\ufff7\003\ufff7\011\ufff7\012\ufff7\017\ufff7\055\ufff7\061\ufff7" +
    "\062\ufff7\063\ufff7\064\ufff7\065\ufff7\001\002\000\010\013" +
    "\uffdf\015\uffdf\016\uffdf\001\002\000\010\013\uffdb\015\035" +
    "\016\uffdb\001\002\000\006\013\uffd9\016\037\001\002\000" +
    "\004\061\036\001\002\000\006\013\uffdc\016\uffdc\001\002" +
    "\000\004\061\050\001\002\000\004\013\041\001\002\000" +
    "\022\011\uffde\014\uffde\055\uffde\061\uffde\062\uffde\063\uffde" +
    "\064\uffde\065\uffde\001\002\000\022\011\uffd5\014\uffd5\055" +
    "\uffd5\061\uffd5\062\uffd5\063\uffd5\064\uffd5\065\uffd5\001\002" +
    "\000\022\011\020\014\047\055\013\061\012\062\011\063" +
    "\024\064\014\065\021\001\002\000\022\011\uffd3\014\uffd3" +
    "\055\uffd3\061\uffd3\062\uffd3\063\uffd3\064\uffd3\065\uffd3\001" +
    "\002\000\022\011\uffd4\014\uffd4\055\uffd4\061\uffd4\062\uffd4" +
    "\063\uffd4\064\uffd4\065\uffd4\001\002\000\022\011\uffd6\014" +
    "\uffd6\055\uffd6\061\uffd6\062\uffd6\063\uffd6\064\uffd6\065\uffd6" +
    "\001\002\000\030\002\uffdd\003\uffdd\011\uffdd\012\uffdd\017" +
    "\uffdd\055\uffdd\061\uffdd\062\uffdd\063\uffdd\064\uffdd\065\uffdd" +
    "\001\002\000\006\013\uffd8\072\uffd8\001\002\000\006\013" +
    "\uffda\072\052\001\002\000\004\061\053\001\002\000\006" +
    "\013\uffd7\072\uffd7\001\002\000\030\002\ufff6\003\ufff6\011" +
    "\ufff6\012\ufff6\017\ufff6\055\ufff6\061\ufff6\062\ufff6\063\ufff6" +
    "\064\ufff6\065\ufff6\001\002\000\030\002\ufff5\003\ufff5\011" +
    "\ufff5\012\ufff5\017\ufff5\055\ufff5\061\ufff5\062\ufff5\063\ufff5" +
    "\064\ufff5\065\ufff5\001\002\000\030\002\000\003\027\011" +
    "\020\012\030\017\017\055\013\061\012\062\011\063\024" +
    "\064\014\065\021\001\002\000\030\002\ufffc\003\ufffc\011" +
    "\ufffc\012\ufffc\017\ufffc\055\ufffc\061\ufffc\062\ufffc\063\ufffc" +
    "\064\ufffc\065\ufffc\001\002\000\006\004\ufff3\007\uffeb\001" +
    "\002\000\010\010\uffec\044\uffec\061\uffec\001\002\000\004" +
    "\007\063\001\002\000\020\010\uffea\055\uffea\061\uffea\062" +
    "\uffea\063\uffea\064\uffea\065\uffea\001\002\000\020\010\uffe2" +
    "\055\013\061\012\062\011\063\024\064\014\065\021\001" +
    "\002\000\004\010\uffe9\001\002\000\006\010\uffe0\072\072" +
    "\001\002\000\006\044\061\061\070\001\002\000\010\004" +
    "\ufff3\010\ufff3\072\ufff3\001\002\000\004\010\uffe3\001\002" +
    "\000\016\055\013\061\012\062\011\063\024\064\014\065" +
    "\021\001\002\000\006\010\uffe0\072\072\001\002\000\004" +
    "\010\uffe1\001\002\000\004\010\076\001\002\000\004\013" +
    "\100\001\002\000\032\002\uffe8\003\uffe8\011\uffe8\012\uffe8" +
    "\014\uffe8\017\uffe8\055\uffe8\061\uffe8\062\uffe8\063\uffe8\064" +
    "\uffe8\065\uffe8\001\002\000\074\004\uffcb\007\uffcb\013\uffcb" +
    "\014\uffcb\020\uffcb\022\uffcb\023\uffcb\024\uffcb\025\uffcb\026" +
    "\uffcb\030\uffcb\031\uffcb\032\uffcb\033\uffcb\034\uffcb\040\uffcb" +
    "\041\uffcb\042\uffcb\043\uffcb\055\uffcb\061\uffcb\062\uffcb\063" +
    "\uffcb\064\uffcb\065\uffcb\066\uffcb\067\uffcb\070\uffcb\071\uffcb" +
    "\001\002\000\074\004\145\007\144\013\100\014\uffc9\020" +
    "\114\022\137\023\106\024\120\025\127\026\131\030\115" +
    "\031\135\032\132\033\121\034\136\040\124\041\113\042" +
    "\104\043\134\055\013\061\130\062\011\063\024\064\014" +
    "\065\021\066\116\067\111\070\140\071\122\001\002\000" +
    "\064\004\uffc3\007\uffc3\013\uffc3\014\uffc3\020\uffc3\021\uffc3" +
    "\022\uffc3\023\uffc3\024\uffc3\025\uffc3\026\uffc3\030\uffc3\031" +
    "\uffc3\032\uffc3\033\uffc3\034\uffc3\040\uffc3\041\uffc3\042\uffc3" +
    "\043\uffc3\061\uffc3\066\uffc3\067\uffc3\070\uffc3\071\uffc3\001" +
    "\002\000\044\004\uffaf\005\uffaf\006\uffaf\010\uffaf\027\321" +
    "\035\uffaf\042\uffaf\045\uffaf\046\uffaf\047\uffaf\050\uffaf\051" +
    "\uffaf\052\uffaf\053\uffaf\054\uffaf\072\uffaf\073\uffaf\001\002" +
    "\000\040\007\144\030\115\031\135\032\132\033\121\034" +
    "\136\040\124\041\113\042\104\043\134\061\146\066\116" +
    "\067\111\070\140\071\122\001\002\000\034\004\317\005" +
    "\156\035\150\042\154\045\151\046\152\047\164\050\160" +
    "\051\162\052\161\053\153\054\157\073\155\001\002\000" +
    "\004\007\306\001\002\000\064\004\uffc1\007\uffc1\013\uffc1" +
    "\014\uffc1\020\uffc1\021\uffc1\022\uffc1\023\uffc1\024\uffc1\025" +
    "\uffc1\026\uffc1\030\uffc1\031\uffc1\032\uffc1\033\uffc1\034\uffc1" +
    "\040\uffc1\041\uffc1\042\uffc1\043\uffc1\061\uffc1\066\uffc1\067" +
    "\uffc1\070\uffc1\071\uffc1\001\002\000\062\004\145\007\144" +
    "\013\100\014\uffc9\020\114\022\137\023\106\024\120\025" +
    "\127\026\131\030\115\031\135\032\132\033\121\034\136" +
    "\040\124\041\113\042\104\043\134\061\146\066\116\067" +
    "\111\070\140\071\122\001\002\000\042\004\uff8b\005\uff8b" +
    "\006\uff8b\010\uff8b\035\uff8b\042\uff8b\045\uff8b\046\uff8b\047" +
    "\uff8b\050\uff8b\051\uff8b\052\uff8b\053\uff8b\054\uff8b\072\uff8b" +
    "\073\uff8b\001\002\000\042\004\uffad\005\uffad\006\uffad\010" +
    "\uffad\035\uffad\042\uffad\045\uffad\046\uffad\047\uffad\050\uffad" +
    "\051\uffad\052\uffad\053\uffad\054\uffad\072\uffad\073\uffad\001" +
    "\002\000\004\007\303\001\002\000\004\007\274\001\002" +
    "\000\042\004\uffae\005\uffae\006\uffae\010\uffae\035\uffae\042" +
    "\uffae\045\uffae\046\uffae\047\uffae\050\uffae\051\uffae\052\uffae" +
    "\053\uffae\054\uffae\072\uffae\073\uffae\001\002\000\042\004" +
    "\uff8c\005\uff8c\006\uff8c\010\uff8c\035\uff8c\042\uff8c\045\uff8c" +
    "\046\uff8c\047\uff8c\050\uff8c\051\uff8c\052\uff8c\053\uff8c\054" +
    "\uff8c\072\uff8c\073\uff8c\001\002\000\064\004\uffc2\007\uffc2" +
    "\013\uffc2\014\uffc2\020\uffc2\021\uffc2\022\uffc2\023\uffc2\024" +
    "\uffc2\025\uffc2\026\uffc2\030\uffc2\031\uffc2\032\uffc2\033\uffc2" +
    "\034\uffc2\040\uffc2\041\uffc2\042\uffc2\043\uffc2\061\uffc2\066" +
    "\uffc2\067\uffc2\070\uffc2\071\uffc2\001\002\000\040\007\144" +
    "\030\115\031\135\032\132\033\121\034\136\040\124\041" +
    "\113\042\104\043\134\061\146\066\116\067\111\070\140" +
    "\071\122\001\002\000\004\007\267\001\002\000\042\004" +
    "\uff89\005\uff89\006\uff89\010\uff89\035\uff89\042\uff89\045\uff89" +
    "\046\uff89\047\uff89\050\uff89\051\uff89\052\uff89\053\uff89\054" +
    "\uff89\072\uff89\073\uff89\001\002\000\064\004\uffc5\007\uffc5" +
    "\013\uffc5\014\uffc5\020\uffc5\021\uffc5\022\uffc5\023\uffc5\024" +
    "\uffc5\025\uffc5\026\uffc5\030\uffc5\031\uffc5\032\uffc5\033\uffc5" +
    "\034\uffc5\040\uffc5\041\uffc5\042\uffc5\043\uffc5\061\uffc5\066" +
    "\uffc5\067\uffc5\070\uffc5\071\uffc5\001\002\000\042\004\uff88" +
    "\005\uff88\006\uff88\010\uff88\035\uff88\042\uff88\045\uff88\046" +
    "\uff88\047\uff88\050\uff88\051\uff88\052\uff88\053\uff88\054\uff88" +
    "\072\uff88\073\uff88\001\002\000\004\014\266\001\002\000" +
    "\042\004\uffb0\005\uffb0\006\uffb0\010\uffb0\035\uffb0\042\uffb0" +
    "\045\uffb0\046\uffb0\047\uffb0\050\uffb0\051\uffb0\052\uffb0\053" +
    "\uffb0\054\uffb0\072\uffb0\073\uffb0\001\002\000\004\004\265" +
    "\001\002\000\044\004\uff99\005\uff99\007\234\027\uff99\035" +
    "\uff99\042\uff99\044\uffed\045\uff99\046\uff99\047\uff99\050\uff99" +
    "\051\uff99\052\uff99\053\uff99\054\uff99\061\uffed\073\uff99\001" +
    "\002\000\004\007\260\001\002\000\004\007\253\001\002" +
    "\000\074\004\uffcc\007\uffcc\013\uffcc\014\uffcc\020\uffcc\022" +
    "\uffcc\023\uffcc\024\uffcc\025\uffcc\026\uffcc\030\uffcc\031\uffcc" +
    "\032\uffcc\033\uffcc\034\uffcc\040\uffcc\041\uffcc\042\uffcc\043" +
    "\uffcc\055\uffcc\061\uffcc\062\uffcc\063\uffcc\064\uffcc\065\uffcc" +
    "\066\uffcc\067\uffcc\070\uffcc\071\uffcc\001\002\000\040\007" +
    "\144\030\115\031\135\032\132\033\121\034\136\040\124" +
    "\041\113\042\104\043\134\061\146\066\116\067\111\070" +
    "\140\071\122\001\002\000\004\007\247\001\002\000\004" +
    "\007\244\001\002\000\004\007\240\001\002\000\042\004" +
    "\uff8a\005\uff8a\006\uff8a\010\uff8a\035\uff8a\042\uff8a\045\uff8a" +
    "\046\uff8a\047\uff8a\050\uff8a\051\uff8a\052\uff8a\053\uff8a\054" +
    "\uff8a\072\uff8a\073\uff8a\001\002\000\064\004\uffc0\007\uffc0" +
    "\013\uffc0\014\uffc0\020\uffc0\021\uffc0\022\uffc0\023\uffc0\024" +
    "\uffc0\025\uffc0\026\uffc0\030\uffc0\031\uffc0\032\uffc0\033\uffc0" +
    "\034\uffc0\040\uffc0\041\uffc0\042\uffc0\043\uffc0\061\uffc0\066" +
    "\uffc0\067\uffc0\070\uffc0\071\uffc0\001\002\000\064\004\uffc4" +
    "\007\uffc4\013\uffc4\014\uffc4\020\uffc4\021\uffc4\022\uffc4\023" +
    "\uffc4\024\uffc4\025\uffc4\026\uffc4\030\uffc4\031\uffc4\032\uffc4" +
    "\033\uffc4\034\uffc4\040\uffc4\041\uffc4\042\uffc4\043\uffc4\061" +
    "\uffc4\066\uffc4\067\uffc4\070\uffc4\071\uffc4\001\002\000\064" +
    "\004\uffc6\007\uffc6\013\uffc6\014\uffc6\020\uffc6\021\uffc6\022" +
    "\uffc6\023\uffc6\024\uffc6\025\uffc6\026\uffc6\030\uffc6\031\uffc6" +
    "\032\uffc6\033\uffc6\034\uffc6\040\uffc6\041\uffc6\042\uffc6\043" +
    "\uffc6\061\uffc6\066\uffc6\067\uffc6\070\uffc6\071\uffc6\001\002" +
    "\000\040\007\144\030\115\031\135\032\132\033\121\034" +
    "\136\040\124\041\113\042\104\043\134\061\146\066\116" +
    "\067\111\070\140\071\122\001\002\000\064\004\uffc7\007" +
    "\uffc7\013\uffc7\014\uffc7\020\uffc7\021\uffc7\022\uffc7\023\uffc7" +
    "\024\uffc7\025\uffc7\026\uffc7\030\uffc7\031\uffc7\032\uffc7\033" +
    "\uffc7\034\uffc7\040\uffc7\041\uffc7\042\uffc7\043\uffc7\061\uffc7" +
    "\066\uffc7\067\uffc7\070\uffc7\071\uffc7\001\002\000\046\004" +
    "\uff99\005\uff99\006\uff99\007\234\010\uff99\027\uff99\035\uff99" +
    "\042\uff99\045\uff99\046\uff99\047\uff99\050\uff99\051\uff99\052" +
    "\uff99\053\uff99\054\uff99\072\uff99\073\uff99\001\002\000\034" +
    "\005\156\010\uffac\035\150\042\154\045\151\046\152\047" +
    "\164\050\160\051\162\052\161\053\153\054\157\073\155" +
    "\001\002\000\010\036\203\037\202\061\204\001\002\000" +
    "\040\007\144\030\115\031\135\032\132\033\121\034\136" +
    "\040\124\041\113\042\104\043\134\061\146\066\116\067" +
    "\111\070\140\071\122\001\002\000\040\007\144\030\115" +
    "\031\135\032\132\033\121\034\136\040\124\041\113\042" +
    "\104\043\134\061\146\066\116\067\111\070\140\071\122" +
    "\001\002\000\040\007\144\030\115\031\135\032\132\033" +
    "\121\034\136\040\124\041\113\042\104\043\134\061\146" +
    "\066\116\067\111\070\140\071\122\001\002\000\040\007" +
    "\144\030\115\031\135\032\132\033\121\034\136\040\124" +
    "\041\113\042\104\043\134\061\146\066\116\067\111\070" +
    "\140\071\122\001\002\000\040\007\144\030\115\031\135" +
    "\032\132\033\121\034\136\040\124\041\113\042\104\043" +
    "\134\061\146\066\116\067\111\070\140\071\122\001\002" +
    "\000\040\007\144\030\115\031\135\032\132\033\121\034" +
    "\136\040\124\041\113\042\104\043\134\061\146\066\116" +
    "\067\111\070\140\071\122\001\002\000\040\007\144\030" +
    "\115\031\135\032\132\033\121\034\136\040\124\041\113" +
    "\042\104\043\134\061\146\066\116\067\111\070\140\071" +
    "\122\001\002\000\040\007\144\030\115\031\135\032\132" +
    "\033\121\034\136\040\124\041\113\042\104\043\134\061" +
    "\146\066\116\067\111\070\140\071\122\001\002\000\040" +
    "\007\144\030\115\031\135\032\132\033\121\034\136\040" +
    "\124\041\113\042\104\043\134\061\146\066\116\067\111" +
    "\070\140\071\122\001\002\000\040\007\144\030\115\031" +
    "\135\032\132\033\121\034\136\040\124\041\113\042\104" +
    "\043\134\061\146\066\116\067\111\070\140\071\122\001" +
    "\002\000\004\010\166\001\002\000\040\007\144\030\115" +
    "\031\135\032\132\033\121\034\136\040\124\041\113\042" +
    "\104\043\134\061\146\066\116\067\111\070\140\071\122" +
    "\001\002\000\042\004\uffa7\005\156\006\uffa7\010\uffa7\035" +
    "\150\042\uffa7\045\uffa7\046\uffa7\047\uffa7\050\uffa7\051\uffa7" +
    "\052\uffa7\053\uffa7\054\uffa7\072\uffa7\073\uffa7\001\002\000" +
    "\042\004\uffab\005\uffab\006\uffab\010\uffab\035\uffab\042\uffab" +
    "\045\uffab\046\uffab\047\uffab\050\uffab\051\uffab\052\uffab\053" +
    "\uffab\054\uffab\072\uffab\073\uffab\001\002\000\042\004\uffa5" +
    "\005\156\006\uffa5\010\uffa5\035\150\042\154\045\151\046" +
    "\152\047\164\050\160\051\uffa5\052\uffa5\053\153\054\157" +
    "\072\uffa5\073\155\001\002\000\042\004\uffa4\005\156\006" +
    "\uffa4\010\uffa4\035\150\042\154\045\151\046\152\047\164" +
    "\050\160\051\162\052\uffa4\053\153\054\157\072\uffa4\073" +
    "\155\001\002\000\042\004\uffa6\005\156\006\uffa6\010\uffa6" +
    "\035\150\042\uffa6\045\uffa6\046\uffa6\047\uffa6\050\uffa6\051" +
    "\uffa6\052\uffa6\053\uffa6\054\uffa6\072\uffa6\073\uffa6\001\002" +
    "\000\036\004\uffa1\005\156\006\uffa1\010\uffa1\035\150\042" +
    "\154\045\151\046\152\047\164\050\160\051\uffa1\052\uffa1" +
    "\072\uffa1\073\155\001\002\000\034\005\156\006\174\035" +
    "\150\042\154\045\151\046\152\047\164\050\160\051\162" +
    "\052\161\053\153\054\157\073\155\001\002\000\044\004" +
    "\uff97\005\uff97\006\uff97\010\uff97\027\uff97\035\uff97\042\uff97" +
    "\045\uff97\046\uff97\047\uff97\050\uff97\051\uff97\052\uff97\053" +
    "\uff97\054\uff97\072\uff97\073\uff97\001\002\000\040\004\uffa3" +
    "\005\156\006\uffa3\010\uffa3\035\150\042\154\045\151\046" +
    "\152\047\164\050\160\051\uffa3\052\uffa3\053\uffa3\054\uffa3" +
    "\072\uffa3\001\002\000\042\004\uffa9\005\156\006\uffa9\010" +
    "\uffa9\035\150\042\uffa9\045\uffa9\046\152\047\164\050\160" +
    "\051\uffa9\052\uffa9\053\uffa9\054\uffa9\072\uffa9\073\uffa9\001" +
    "\002\000\036\004\uffa2\005\156\006\uffa2\010\uffa2\035\150" +
    "\042\154\045\151\046\152\047\164\050\160\051\uffa2\052" +
    "\uffa2\072\uffa2\073\155\001\002\000\042\004\uffa8\005\156" +
    "\006\uffa8\010\uffa8\035\150\042\uffa8\045\uffa8\046\uffa8\047" +
    "\uffa8\050\uffa8\051\uffa8\052\uffa8\053\uffa8\054\uffa8\072\uffa8" +
    "\073\uffa8\001\002\000\042\004\uffaa\005\156\006\uffaa\010" +
    "\uffaa\035\150\042\uffaa\045\uffaa\046\152\047\164\050\160" +
    "\051\uffaa\052\uffaa\053\uffaa\054\uffaa\072\uffaa\073\uffaa\001" +
    "\002\000\004\007\227\001\002\000\004\007\224\001\002" +
    "\000\046\004\uff98\005\uff98\006\uff98\007\220\010\uff98\027" +
    "\uff98\035\uff98\042\uff98\045\uff98\046\uff98\047\uff98\050\uff98" +
    "\051\uff98\052\uff98\053\uff98\054\uff98\072\uff98\073\uff98\001" +
    "\002\000\004\007\206\001\002\000\042\007\144\010\uff8d" +
    "\030\115\031\135\032\132\033\121\034\136\040\124\041" +
    "\113\042\104\043\134\061\146\066\116\067\111\070\140" +
    "\071\122\001\002\000\004\010\217\001\002\000\036\005" +
    "\156\010\uff8f\035\150\042\154\045\151\046\152\047\164" +
    "\050\160\051\162\052\161\053\153\054\157\072\uff8f\073" +
    "\155\001\002\000\006\010\uffb2\072\212\001\002\000\040" +
    "\007\144\030\115\031\135\032\132\033\121\034\136\040" +
    "\124\041\113\042\104\043\134\061\146\066\116\067\111" +
    "\070\140\071\122\001\002\000\004\010\uff8e\001\002\000" +
    "\036\005\156\010\uffb4\035\150\042\154\045\151\046\152" +
    "\047\164\050\160\051\162\052\161\053\153\054\157\072" +
    "\uffb4\073\155\001\002\000\006\010\uffb2\072\212\001\002" +
    "\000\004\010\uffb3\001\002\000\042\004\uff92\005\uff92\006" +
    "\uff92\010\uff92\035\uff92\042\uff92\045\uff92\046\uff92\047\uff92" +
    "\050\uff92\051\uff92\052\uff92\053\uff92\054\uff92\072\uff92\073" +
    "\uff92\001\002\000\042\007\144\010\uff8d\030\115\031\135" +
    "\032\132\033\121\034\136\040\124\041\113\042\104\043" +
    "\134\061\146\066\116\067\111\070\140\071\122\001\002" +
    "\000\004\010\uff94\001\002\000\004\010\223\001\002\000" +
    "\042\004\uff93\005\uff93\006\uff93\010\uff93\035\uff93\042\uff93" +
    "\045\uff93\046\uff93\047\uff93\050\uff93\051\uff93\052\uff93\053" +
    "\uff93\054\uff93\072\uff93\073\uff93\001\002\000\040\007\144" +
    "\030\115\031\135\032\132\033\121\034\136\040\124\041" +
    "\113\042\104\043\134\061\146\066\116\067\111\070\140" +
    "\071\122\001\002\000\034\005\156\010\226\035\150\042" +
    "\154\045\151\046\152\047\164\050\160\051\162\052\161" +
    "\053\153\054\157\073\155\001\002\000\004\007\uff91\001" +
    "\002\000\040\007\144\030\115\031\135\032\132\033\121" +
    "\034\136\040\124\041\113\042\104\043\134\061\146\066" +
    "\116\067\111\070\140\071\122\001\002\000\034\005\156" +
    "\035\150\042\154\045\151\046\152\047\164\050\160\051" +
    "\162\052\161\053\153\054\157\072\231\073\155\001\002" +
    "\000\040\007\144\030\115\031\135\032\132\033\121\034" +
    "\136\040\124\041\113\042\104\043\134\061\146\066\116" +
    "\067\111\070\140\071\122\001\002\000\034\005\156\010" +
    "\233\035\150\042\154\045\151\046\152\047\164\050\160" +
    "\051\162\052\161\053\153\054\157\073\155\001\002\000" +
    "\004\007\uff90\001\002\000\042\007\144\010\uff8d\030\115" +
    "\031\135\032\132\033\121\034\136\040\124\041\113\042" +
    "\104\043\134\061\146\066\116\067\111\070\140\071\122" +
    "\001\002\000\004\010\uff96\001\002\000\004\010\237\001" +
    "\002\000\042\004\uff95\005\uff95\006\uff95\010\uff95\035\uff95" +
    "\042\uff95\045\uff95\046\uff95\047\uff95\050\uff95\051\uff95\052" +
    "\uff95\053\uff95\054\uff95\072\uff95\073\uff95\001\002\000\040" +
    "\007\144\030\115\031\135\032\132\033\121\034\136\040" +
    "\124\041\113\042\104\043\134\061\146\066\116\067\111" +
    "\070\140\071\122\001\002\000\034\005\156\010\242\035" +
    "\150\042\154\045\151\046\152\047\164\050\160\051\162" +
    "\052\161\053\153\054\157\073\155\001\002\000\060\004" +
    "\145\007\144\013\100\020\114\022\137\023\106\024\120" +
    "\025\127\026\131\030\115\031\135\032\132\033\121\034" +
    "\136\040\124\041\113\042\104\043\134\061\146\066\116" +
    "\067\111\070\140\071\122\001\002\000\064\004\uffba\007" +
    "\uffba\013\uffba\014\uffba\020\uffba\021\uffba\022\uffba\023\uffba" +
    "\024\uffba\025\uffba\026\uffba\030\uffba\031\uffba\032\uffba\033" +
    "\uffba\034\uffba\040\uffba\041\uffba\042\uffba\043\uffba\061\uffba" +
    "\066\uffba\067\uffba\070\uffba\071\uffba\001\002\000\040\007" +
    "\144\030\115\031\135\032\132\033\121\034\136\040\124" +
    "\041\113\042\104\043\134\061\146\066\116\067\111\070" +
    "\140\071\122\001\002\000\034\005\156\010\246\035\150" +
    "\042\154\045\151\046\152\047\164\050\160\051\162\052" +
    "\161\053\153\054\157\073\155\001\002\000\042\004\uff9a" +
    "\005\uff9a\006\uff9a\010\uff9a\035\uff9a\042\uff9a\045\uff9a\046" +
    "\uff9a\047\uff9a\050\uff9a\051\uff9a\052\uff9a\053\uff9a\054\uff9a" +
    "\072\uff9a\073\uff9a\001\002\000\004\061\250\001\002\000" +
    "\004\010\251\001\002\000\042\004\uff9e\005\uff9e\006\uff9e" +
    "\010\uff9e\035\uff9e\042\uff9e\045\uff9e\046\uff9e\047\uff9e\050" +
    "\uff9e\051\uff9e\052\uff9e\053\uff9e\054\uff9e\072\uff9e\073\uff9e" +
    "\001\002\000\042\004\uff9f\005\156\006\uff9f\010\uff9f\035" +
    "\150\042\uff9f\045\uff9f\046\uff9f\047\uff9f\050\uff9f\051\uff9f" +
    "\052\uff9f\053\uff9f\054\uff9f\072\uff9f\073\uff9f\001\002\000" +
    "\040\007\144\030\115\031\135\032\132\033\121\034\136" +
    "\040\124\041\113\042\104\043\134\061\146\066\116\067" +
    "\111\070\140\071\122\001\002\000\034\005\156\035\150" +
    "\042\154\045\151\046\152\047\164\050\160\051\162\052" +
    "\161\053\153\054\157\072\255\073\155\001\002\000\014" +
    "\061\012\062\011\063\024\064\014\065\021\001\002\000" +
    "\006\010\257\044\061\001\002\000\042\004\uff9d\005\uff9d" +
    "\006\uff9d\010\uff9d\035\uff9d\042\uff9d\045\uff9d\046\uff9d\047" +
    "\uff9d\050\uff9d\051\uff9d\052\uff9d\053\uff9d\054\uff9d\072\uff9d" +
    "\073\uff9d\001\002\000\040\007\144\030\115\031\135\032" +
    "\132\033\121\034\136\040\124\041\113\042\104\043\134" +
    "\061\146\066\116\067\111\070\140\071\122\001\002\000" +
    "\036\005\156\010\uffb2\035\150\042\154\045\151\046\152" +
    "\047\164\050\160\051\162\052\161\053\153\054\157\072" +
    "\212\073\155\001\002\000\004\010\263\001\002\000\004" +
    "\004\264\001\002\000\064\004\uffb5\007\uffb5\013\uffb5\014" +
    "\uffb5\020\uffb5\021\uffb5\022\uffb5\023\uffb5\024\uffb5\025\uffb5" +
    "\026\uffb5\030\uffb5\031\uffb5\032\uffb5\033\uffb5\034\uffb5\040" +
    "\uffb5\041\uffb5\042\uffb5\043\uffb5\061\uffb5\066\uffb5\067\uffb5" +
    "\070\uffb5\071\uffb5\001\002\000\064\004\uffb6\007\uffb6\013" +
    "\uffb6\014\uffb6\020\uffb6\021\uffb6\022\uffb6\023\uffb6\024\uffb6" +
    "\025\uffb6\026\uffb6\030\uffb6\031\uffb6\032\uffb6\033\uffb6\034" +
    "\uffb6\040\uffb6\041\uffb6\042\uffb6\043\uffb6\061\uffb6\066\uffb6" +
    "\067\uffb6\070\uffb6\071\uffb6\001\002\000\110\002\uffcd\003" +
    "\uffcd\004\uffcd\007\uffcd\011\uffcd\012\uffcd\013\uffcd\014\uffcd" +
    "\017\uffcd\020\uffcd\021\uffcd\022\uffcd\023\uffcd\024\uffcd\025" +
    "\uffcd\026\uffcd\030\uffcd\031\uffcd\032\uffcd\033\uffcd\034\uffcd" +
    "\040\uffcd\041\uffcd\042\uffcd\043\uffcd\055\uffcd\061\uffcd\062" +
    "\uffcd\063\uffcd\064\uffcd\065\uffcd\066\uffcd\067\uffcd\070\uffcd" +
    "\071\uffcd\001\002\000\004\010\270\001\002\000\042\004" +
    "\uff9c\005\uff9c\006\uff9c\010\uff9c\035\uff9c\042\uff9c\045\uff9c" +
    "\046\uff9c\047\uff9c\050\uff9c\051\uff9c\052\uff9c\053\uff9c\054" +
    "\uff9c\072\uff9c\073\uff9c\001\002\000\034\004\uffb8\005\156" +
    "\035\150\042\154\045\151\046\152\047\164\050\160\051" +
    "\162\052\161\053\153\054\157\073\155\001\002\000\004" +
    "\004\273\001\002\000\064\004\uffb7\007\uffb7\013\uffb7\014" +
    "\uffb7\020\uffb7\021\uffb7\022\uffb7\023\uffb7\024\uffb7\025\uffb7" +
    "\026\uffb7\030\uffb7\031\uffb7\032\uffb7\033\uffb7\034\uffb7\040" +
    "\uffb7\041\uffb7\042\uffb7\043\uffb7\061\uffb7\066\uffb7\067\uffb7" +
    "\070\uffb7\071\uffb7\001\002\000\040\007\144\030\115\031" +
    "\135\032\132\033\121\034\136\040\124\041\113\042\104" +
    "\043\134\061\146\066\116\067\111\070\140\071\122\001" +
    "\002\000\034\005\156\010\276\035\150\042\154\045\151" +
    "\046\152\047\164\050\160\051\162\052\161\053\153\054" +
    "\157\073\155\001\002\000\060\004\145\007\144\013\100" +
    "\020\114\022\137\023\106\024\120\025\127\026\131\030" +
    "\115\031\135\032\132\033\121\034\136\040\124\041\113" +
    "\042\104\043\134\061\146\066\116\067\111\070\140\071" +
    "\122\001\002\000\064\004\uffbb\007\uffbb\013\uffbb\014\uffbb" +
    "\020\uffbb\021\300\022\uffbb\023\uffbb\024\uffbb\025\uffbb\026" +
    "\uffbb\030\uffbb\031\uffbb\032\uffbb\033\uffbb\034\uffbb\040\uffbb" +
    "\041\uffbb\042\uffbb\043\uffbb\061\uffbb\066\uffbb\067\uffbb\070" +
    "\uffbb\071\uffbb\001\002\000\060\004\145\007\144\013\100" +
    "\020\114\022\137\023\106\024\120\025\127\026\131\030" +
    "\115\031\135\032\132\033\121\034\136\040\124\041\113" +
    "\042\104\043\134\061\146\066\116\067\111\070\140\071" +
    "\122\001\002\000\064\004\uffbd\007\uffbd\013\uffbd\014\uffbd" +
    "\020\uffbd\021\uffbd\022\uffbd\023\uffbd\024\uffbd\025\uffbd\026" +
    "\uffbd\030\uffbd\031\uffbd\032\uffbd\033\uffbd\034\uffbd\040\uffbd" +
    "\041\uffbd\042\uffbd\043\uffbd\061\uffbd\066\uffbd\067\uffbd\070" +
    "\uffbd\071\uffbd\001\002\000\064\004\uffbc\007\uffbc\013\uffbc" +
    "\014\uffbc\020\uffbc\021\uffbc\022\uffbc\023\uffbc\024\uffbc\025" +
    "\uffbc\026\uffbc\030\uffbc\031\uffbc\032\uffbc\033\uffbc\034\uffbc" +
    "\040\uffbc\041\uffbc\042\uffbc\043\uffbc\061\uffbc\066\uffbc\067" +
    "\uffbc\070\uffbc\071\uffbc\001\002\000\004\010\304\001\002" +
    "\000\042\004\uff9b\005\uff9b\006\uff9b\010\uff9b\035\uff9b\042" +
    "\uff9b\045\uff9b\046\uff9b\047\uff9b\050\uff9b\051\uff9b\052\uff9b" +
    "\053\uff9b\054\uff9b\072\uff9b\073\uff9b\001\002\000\004\014" +
    "\uffca\001\002\000\042\004\uffbe\007\144\030\115\031\135" +
    "\032\132\033\121\034\136\040\124\041\113\042\104\043" +
    "\134\061\146\066\116\067\111\070\140\071\122\001\002" +
    "\000\004\004\311\001\002\000\036\004\uffbf\005\156\010" +
    "\uffbf\035\150\042\154\045\151\046\152\047\164\050\160" +
    "\051\162\052\161\053\153\054\157\073\155\001\002\000" +
    "\040\007\144\030\115\031\135\032\132\033\121\034\136" +
    "\040\124\041\113\042\104\043\134\061\146\066\116\067" +
    "\111\070\140\071\122\001\002\000\034\004\313\005\156" +
    "\035\150\042\154\045\151\046\152\047\164\050\160\051" +
    "\162\052\161\053\153\054\157\073\155\001\002\000\042" +
    "\007\144\010\uffbe\030\115\031\135\032\132\033\121\034" +
    "\136\040\124\041\113\042\104\043\134\061\146\066\116" +
    "\067\111\070\140\071\122\001\002\000\004\010\315\001" +
    "\002\000\060\004\145\007\144\013\100\020\114\022\137" +
    "\023\106\024\120\025\127\026\131\030\115\031\135\032" +
    "\132\033\121\034\136\040\124\041\113\042\104\043\134" +
    "\061\146\066\116\067\111\070\140\071\122\001\002\000" +
    "\064\004\uffb9\007\uffb9\013\uffb9\014\uffb9\020\uffb9\021\uffb9" +
    "\022\uffb9\023\uffb9\024\uffb9\025\uffb9\026\uffb9\030\uffb9\031" +
    "\uffb9\032\uffb9\033\uffb9\034\uffb9\040\uffb9\041\uffb9\042\uffb9" +
    "\043\uffb9\061\uffb9\066\uffb9\067\uffb9\070\uffb9\071\uffb9\001" +
    "\002\000\064\004\uffc8\007\uffc8\013\uffc8\014\uffc8\020\uffc8" +
    "\021\uffc8\022\uffc8\023\uffc8\024\uffc8\025\uffc8\026\uffc8\030" +
    "\uffc8\031\uffc8\032\uffc8\033\uffc8\034\uffc8\040\uffc8\041\uffc8" +
    "\042\uffc8\043\uffc8\061\uffc8\066\uffc8\067\uffc8\070\uffc8\071" +
    "\uffc8\001\002\000\042\004\uffa0\005\156\006\uffa0\010\uffa0" +
    "\035\150\042\uffa0\045\uffa0\046\152\047\164\050\160\051" +
    "\uffa0\052\uffa0\053\uffa0\054\uffa0\072\uffa0\073\uffa0\001\002" +
    "\000\040\007\144\030\115\031\135\032\132\033\121\034" +
    "\136\040\124\041\113\042\104\043\134\061\146\066\116" +
    "\067\111\070\140\071\122\001\002\000\042\004\uffb1\005" +
    "\156\006\uffb1\010\uffb1\035\150\042\154\045\151\046\152" +
    "\047\164\050\160\051\162\052\161\053\153\054\157\072" +
    "\uffb1\073\155\001\002\000\106\002\ufff4\003\ufff4\004\ufff4" +
    "\007\ufff4\011\ufff4\012\ufff4\013\ufff4\014\ufff4\017\ufff4\020" +
    "\ufff4\022\ufff4\023\ufff4\024\ufff4\025\ufff4\026\ufff4\030\ufff4" +
    "\031\ufff4\032\ufff4\033\ufff4\034\ufff4\040\ufff4\041\ufff4\042" +
    "\ufff4\043\ufff4\055\ufff4\061\ufff4\062\ufff4\063\ufff4\064\ufff4" +
    "\065\ufff4\066\ufff4\067\ufff4\070\ufff4\071\ufff4\001\002\000" +
    "\004\007\uffe7\001\002\000\004\007\326\001\002\000\020" +
    "\010\uffe6\055\uffe6\061\uffe6\062\uffe6\063\uffe6\064\uffe6\065" +
    "\uffe6\001\002\000\020\010\uffe2\055\013\061\012\062\011" +
    "\063\024\064\014\065\021\001\002\000\004\010\uffe5\001" +
    "\002\000\004\010\332\001\002\000\004\013\100\001\002" +
    "\000\032\002\uffe4\003\uffe4\011\uffe4\012\uffe4\014\uffe4\017" +
    "\uffe4\055\uffe4\061\uffe4\062\uffe4\063\uffe4\064\uffe4\065\uffe4" +
    "\001\002\000\004\013\335\001\002\000\020\011\uffd0\014" +
    "\uffd0\061\uffd0\062\uffd0\063\uffd0\064\uffd0\065\uffd0\001\002" +
    "\000\020\011\340\014\342\061\012\062\011\063\024\064" +
    "\014\065\021\001\002\000\020\011\uffd1\014\uffd1\061\uffd1" +
    "\062\uffd1\063\uffd1\064\uffd1\065\uffd1\001\002\000\004\061" +
    "\350\001\002\000\006\044\061\061\343\001\002\000\030" +
    "\002\uffd2\003\uffd2\011\uffd2\012\uffd2\017\uffd2\055\uffd2\061" +
    "\uffd2\062\uffd2\063\uffd2\064\uffd2\065\uffd2\001\002\000\004" +
    "\007\344\001\002\000\020\010\uffe2\055\013\061\012\062" +
    "\011\063\024\064\014\065\021\001\002\000\004\010\346" +
    "\001\002\000\004\004\347\001\002\000\020\011\uffcf\014" +
    "\uffcf\061\uffcf\062\uffcf\063\uffcf\064\uffcf\065\uffcf\001\002" +
    "\000\004\007\351\001\002\000\020\010\uffe2\055\013\061" +
    "\012\062\011\063\024\064\014\065\021\001\002\000\004" +
    "\010\353\001\002\000\004\004\354\001\002\000\020\011" +
    "\uffce\014\uffce\061\uffce\062\uffce\063\uffce\064\uffce\065\uffce" +
    "\001\002\000\006\044\061\061\356\001\002\000\010\004" +
    "\ufff2\010\ufff2\072\ufff2\001\002\000\004\002\001\001\002" +
    "\000\004\060\361\001\002\000\030\003\ufffd\011\ufffd\012" +
    "\ufffd\017\ufffd\055\ufffd\057\ufffd\061\ufffd\062\ufffd\063\ufffd" +
    "\064\ufffd\065\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\357\000\010\002\004\036\005\037\006\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\003\025\005\015" +
    "\006\014\007\022\010\030\040\024\047\021\001\001\000" +
    "\006\036\007\037\006\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\040\354\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\004\055\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\057\032\001\001\000\004" +
    "\012\033\001\001\000\004\013\037\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\035\050\001\001\000\002" +
    "\001\001\000\004\060\041\001\001\000\004\014\042\001" +
    "\001\000\014\005\044\006\043\015\045\040\024\047\021" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\003\056\005\015\006\014\007\022" +
    "\010\030\040\024\047\021\001\001\000\002\001\001\000" +
    "\004\051\061\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\052\063\001\001\000\010\040\066\045\064\047" +
    "\065\001\001\000\004\053\074\001\001\000\004\046\070" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\040\066\047\072\001\001\000\004\046\073" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\011" +
    "\076\001\001\000\002\001\001\000\004\020\100\001\001" +
    "\000\042\005\132\011\140\021\124\022\107\023\142\024" +
    "\122\025\141\026\101\027\116\030\106\040\066\041\125" +
    "\042\102\043\104\047\021\050\111\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\041\125\042\102\043\317" +
    "\050\111\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\011\140\021\304\022\107\023\142" +
    "\024\122\025\141\026\101\027\116\030\106\041\125\042" +
    "\102\043\104\050\111\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\041\125" +
    "\042\102\043\270\050\111\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\041\125\042\102\043\251\050\111\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\041\125\042\102\043\146\050\111\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\063\162\001" +
    "\001\000\004\034\204\001\001\000\012\041\125\042\102" +
    "\043\200\050\111\001\001\000\012\041\125\042\102\043" +
    "\177\050\111\001\001\000\012\041\125\042\102\043\176" +
    "\050\111\001\001\000\012\041\125\042\102\043\175\050" +
    "\111\001\001\000\012\041\125\042\102\043\174\050\111" +
    "\001\001\000\012\041\125\042\102\043\172\050\111\001" +
    "\001\000\012\041\125\042\102\043\171\050\111\001\001" +
    "\000\012\041\125\042\102\043\170\050\111\001\001\000" +
    "\012\041\125\042\102\043\167\050\111\001\001\000\012" +
    "\041\125\042\102\043\166\050\111\001\001\000\002\001" +
    "\001\000\012\041\125\042\102\043\164\050\111\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\033\206\041\125\042\102\043\207" +
    "\050\111\001\001\000\002\001\001\000\004\066\210\001" +
    "\001\000\004\032\212\001\001\000\012\041\125\042\102" +
    "\043\213\050\111\001\001\000\002\001\001\000\004\062" +
    "\214\001\001\000\004\032\215\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\033\220\041\125\042\102\043" +
    "\207\050\111\001\001\000\004\065\221\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\041\125\042\102\043" +
    "\224\050\111\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\041\125\042\102\043\227\050\111\001\001\000" +
    "\002\001\001\000\012\041\125\042\102\043\231\050\111" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\033" +
    "\234\041\125\042\102\043\207\050\111\001\001\000\004" +
    "\064\235\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\041\125\042\102\043\240\050\111\001\001\000\002" +
    "\001\001\000\032\011\140\022\242\023\142\024\122\025" +
    "\141\026\101\027\116\030\106\041\125\042\102\043\104" +
    "\050\111\001\001\000\002\001\001\000\012\041\125\042" +
    "\102\043\244\050\111\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\041\125\042\102\043\253" +
    "\050\111\001\001\000\002\001\001\000\004\040\255\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\041\125" +
    "\042\102\043\260\050\111\001\001\000\004\032\261\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\061\271\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\041\125\042\102\043\274\050" +
    "\111\001\001\000\002\001\001\000\032\011\140\022\276" +
    "\023\142\024\122\025\141\026\101\027\116\030\106\041" +
    "\125\042\102\043\104\050\111\001\001\000\004\031\300" +
    "\001\001\000\032\011\140\022\301\023\142\024\122\025" +
    "\141\026\101\027\116\030\106\041\125\042\102\043\104" +
    "\050\111\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\041\125\042\102\043\307\044\306\050\111\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\041\125\042\102" +
    "\043\311\050\111\001\001\000\002\001\001\000\014\041" +
    "\125\042\102\043\307\044\313\050\111\001\001\000\002" +
    "\001\001\000\032\011\140\022\315\023\142\024\122\025" +
    "\141\026\101\027\116\030\106\041\125\042\102\043\104" +
    "\050\111\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\041\125\042\102\043\321\050\111" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\054" +
    "\324\001\001\000\002\001\001\000\004\055\326\001\001" +
    "\000\010\040\066\045\327\047\065\001\001\000\004\056" +
    "\330\001\001\000\002\001\001\000\004\011\332\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\016\335\001" +
    "\001\000\006\017\336\040\340\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\040\066\045\344\047\065\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\040\066\045\351\047\065\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
Utilidades.pilaAmbito.push(Utilidades.nombreAmbito); 
    }


int errorCounter=0;
public void syntax_error(Symbol s){
        errorCounter++;

		report_error("Error de sintaxis recuperable No"+errorCounter+". Linea:"  + (s.right+1) +
		" Columna: " + (s.left+1) + ". Texto: \"" + s.value + "\"", null);
	}
public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception 
        {
         errorCounter++;

		report_error("Error de sintaxis no recuperable No"+errorCounter+". Linea:"  + (s.right+1) +
		" Columna: " + (s.left+1) + ". Texto: \"" + s.value + "\"", null);
        }





}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // CONSTANT ::= NULL 
            {
              Expresion RESULT =null;
		int A1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int A1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object A1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Expresion(5,"null");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONSTANT",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // CONSTANT ::= STRINGCONSTANT 
            {
              Expresion RESULT =null;
		int A1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int A1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String A1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Expresion("\""+A1+"\"","string");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONSTANT",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // CONSTANT ::= BOOLEANCONSTANT 
            {
              Expresion RESULT =null;
		int A1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int A1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		boolean A1 = (boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Expresion(A1,"bool");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONSTANT",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // CONSTANT ::= DOUBLECONSTANT 
            {
              Expresion RESULT =null;
		int A1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int A1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		double A1 = (double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Expresion(A1,"double");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONSTANT",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // CONSTANT ::= INTCONSTANT 
            {
              Expresion RESULT =null;
		int A1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int A1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		int A1 = (int)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Expresion(A1,"int");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONSTANT",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // ACTUALS ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTUALS",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // ACTUALS ::= EXPR NT$13 EXPRLIST 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion exp1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTUALS",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // NT$13 ::= 
            {
              Object RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion exp1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
Utilidades.GlobalExpList.add(exp1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$13",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // LIBCALL ::= SetByte leftparen EXPR comma EXPR rightparen 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIBCALL",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // LIBCALL ::= getByte leftparen EXPR rightparen 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIBCALL",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // CALL ::= EXPR dot LIBCALL leftparen ACTUALS rightparen 
            {
              Expresion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CALL",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // CALL ::= EXPR dot IDENT leftparen ACTUALS NT$12 rightparen 
            {
              Expresion RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Expresion) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Expresion exp1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int ide2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int ide2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String ide2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		Utilidades.TraerSimbolo(ide2,Utilidades.nombreAmbito);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CALL",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // NT$12 ::= 
            {
              Expresion RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion exp1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ide2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ide2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String ide2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
Utilidades.VerificarParametros(ide2,String.valueOf(exp1.value));
RESULT=Utilidades.SimboloAExpresion(Utilidades.TraerSimbolo(ide2,Utilidades.nombreAmbito));


              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$12",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // CALL ::= IDENT leftparen ACTUALS NT$11 rightparen 
            {
              Expresion RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Expresion) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		Utilidades.GlobalExpList=new LinkedList<Expresion>();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CALL",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // NT$11 ::= 
            {
              Expresion RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
Utilidades.VerificarParametros(id1,Utilidades.nombreAmbito);RESULT=Utilidades.SimboloAExpresion(Utilidades.TraerSimbolo(id1,Utilidades.nombreAmbito));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // LVALUE ::= EXPR leftsquarebrace EXPR rightsquarebrace 
            {
              Expresion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LVALUE",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // LVALUE ::= EXPR dot IDENT 
            {
              Expresion RESULT =null;
		int E1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion E1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                        
                                        RESULT=new Expresion(id1,"HOLA");   
                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LVALUE",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // LVALUE ::= IDENT 
            {
              Expresion RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        RESULT=new Expresion(id1,"ID");
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LVALUE",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // EXPR ::= Malloc leftparen EXPR rightparen 
            {
              Expresion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // EXPR ::= ReadLine leftparen rightparen 
            {
              Expresion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // EXPR ::= ReadInteger leftparen rightparen 
            {
              Expresion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // EXPR ::= NewArray leftparen EXPR comma TYPE rightparen 
            {
              Expresion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // EXPR ::= New leftparen IDENT rightparen 
            {
              Expresion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // EXPR ::= exclamation EXPR 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=Utilidades.nuevaNot(a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // EXPR ::= minus EXPR 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=Utilidades.newNegativo(a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // EXPR ::= EXPR T_NOTEQUAL EXPR 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=Utilidades.nuevaNotEqual(e1,e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // EXPR ::= EXPR T_EQUAL EXPR 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=Utilidades.nuevaEqual(e1,e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // EXPR ::= EXPR comp EXPR 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String c1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=Utilidades.nuevaComp(e1,c1,e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // EXPR ::= EXPR T_OR EXPR 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=Utilidades.nuevaOr(e1,e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // EXPR ::= EXPR T_AND EXPR 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=Utilidades.nuevaAnd(e1,e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // EXPR ::= EXPR T_mod EXPR 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=Utilidades.nuevoMod(e1,e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // EXPR ::= EXPR T_div EXPR 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=Utilidades.nuevaDiv(e1,e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // EXPR ::= EXPR T_mul EXPR 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=Utilidades.nuevaMult(e1,e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // EXPR ::= EXPR minus EXPR 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=Utilidades.nuevaResta(e1,e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // EXPR ::= EXPR T_plus EXPR 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=Utilidades.nuevaSuma(e1,e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // EXPR ::= leftparen EXPR NT$10 rightparen 
            {
              Expresion RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Expresion) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // NT$10 ::= 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
RESULT=e1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // EXPR ::= CALL 
            {
              Expresion RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion c1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=c1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // EXPR ::= THIS 
            {
              Expresion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // EXPR ::= LVALUE 
            {
              Expresion RESULT =null;
		int l1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int l1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion l1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=l1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // EXPR ::= CONSTANT 
            {
              Expresion RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion c1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=c1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // EXPR ::= LVALUE equal EXPR 
            {
              Expresion RESULT =null;
		int l1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int l1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion l1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int r1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion r1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                if(r1.tipo.equals("ID"))
                {       System.out.println("Llego aca con: "+l1.value);
                        Simbolo s=Utilidades.traerVariable(String.valueOf(r1.value),Utilidades.nombreAmbito);
                        if(s!=null){r1.value=s.valor;r1.tipo=s.tipo;}
                        else{
                                System.out.println("Error grande");
                        }
                }
        
                         Utilidades.Actualizar(String.valueOf(l1.value),Utilidades.nombreAmbito,r1.value,r1.tipo);Utilidades.resultadoActual=null; System.out.println(l1.value+"="+r1.value);
               
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // EXPRLIST ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRLIST",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // EXPRLIST ::= comma EXPR NT$9 EXPRLIST 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion exp1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRLIST",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // NT$9 ::= 
            {
              Object RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion exp1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
Utilidades.GlobalExpList.add(exp1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // PRINTSTMT ::= Print leftparen EXPR EXPRLIST rightparen semicolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINTSTMT",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // BREAKSTMT ::= BREAK semicolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BREAKSTMT",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // RETURNSTMT ::= RETURN EXPR NT$8 semicolon 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETURNSTMT",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // NT$8 ::= 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;


Utilidades.verReturn(e1);



              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // FORSTMT ::= FOR leftparen EXPRP semicolon EXPR semicolon EXPRP rightparen STMT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORSTMT",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // WHILESTMT ::= WHILE leftparen EXPR rightparen STMT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILESTMT",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ELSESTMT ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSESTMT",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ELSESTMT ::= else_t STMT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSESTMT",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // IFSTMT ::= IF leftparen EXPR rightparen STMT ELSESTMT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IFSTMT",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // EXPRP ::= 
            {
              Expresion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRP",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // EXPRP ::= EXPR 
            {
              Expresion RESULT =null;
		int E1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion E1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=E1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRP",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // STMT ::= STMTBLOCK 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STMT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // STMT ::= PRINTSTMT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STMT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // STMT ::= RETURNSTMT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STMT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // STMT ::= BREAKSTMT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STMT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // STMT ::= FORSTMT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STMT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // STMT ::= WHILESTMT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STMT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // STMT ::= IFSTMT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STMT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // STMT ::= semicolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STMT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // STMT ::= EXPR semicolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STMT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // STMTP ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STMTP",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // STMTP ::= STMT STMTP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STMTP",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // VARIABLEDECLP ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARIABLEDECLP",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // VARIABLEDECLP ::= VARIABLEDECLP VARIABLEDECL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARIABLEDECLP",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // STMTBLOCK ::= leftbrace VARIABLEDECLP STMTP rightbrace 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STMTBLOCK",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // PROTOTYPE ::= VOID IDENT leftparen FORMALS rightparen semicolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROTOTYPE",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // PROTOTYPE ::= TYPE IDENT leftparen FORMALS rightparen semicolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROTOTYPE",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // PROTOTYPEP ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROTOTYPEP",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // PROTOTYPEP ::= PROTOTYPEP PROTOTYPE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROTOTYPEP",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // INTERFACEDECL ::= interface_t IDENT leftbrace PROTOTYPEP rightbrace 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INTERFACEDECL",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // FIELD ::= FUNCTIONDECL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FIELD",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // FIELD ::= VARIABLEDECL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FIELD",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // FIELDP ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FIELDP",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // FIELDP ::= FIELDP FIELD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FIELDP",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // IMPLEMENTP ::= IMPLEMENTP comma IDENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPLEMENTP",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // IMPLEMENTP ::= IDENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPLEMENTP",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // IMPLEMENT ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPLEMENT",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // IMPLEMENT ::= implements_t IMPLEMENTP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPLEMENT",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // EXTENDSS ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXTENDSS",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // EXTENDSS ::= extends_t IDENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXTENDSS",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // CLASSDECL ::= CLASS IDENT NT$6 EXTENDSS IMPLEMENT leftbrace NT$7 FIELDP rightbrace 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		
                                            //Utilidades.EliminarVariable(Utilidades.nombreAmbito); 
                                            Utilidades.nombreAmbito=Utilidades.pilaAmbito.pop();
                                            Utilidades.ambitoAnterior=Utilidades.nombreAmbito;
                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CLASSDECL",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // NT$7 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
Utilidades.pilaAmbito.push(Utilidades.nombreAmbito);Utilidades.ambitoAnterior=Utilidades.nombreAmbito;Utilidades.nombreAmbito=id1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // NT$6 ::= 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
Simbolo s=new Simbolo(id1.toString(),Utilidades.nombreAmbito,id1); 
                                s.desc="Clase";
                                Utilidades.AnadirTabla(s);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // LISTAVARIABLE ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTAVARIABLE",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // LISTAVARIABLE ::= comma VARIABLE LISTAVARIABLE 
            {
              String RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String c1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                                Utilidades.params+=c1+v1;
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTAVARIABLE",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // FORMALS ::= 
            {
              String[] RESULT =null;
		RESULT=new String[]{""};
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORMALS",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // FORMALS ::= VARIABLE LISTAVARIABLE 
            {
              String[] RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int l1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int l1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String l1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
String result=v1+Utilidades.params;
Utilidades.params="";
RESULT=result.split(",");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORMALS",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // FUNCTIONDECL ::= VOID IDENT NT$3 leftparen NT$4 FORMALS NT$5 rightparen STMTBLOCK 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int f1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String[] f1 = (String[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 
                                                                                 //Utilidades.EliminarVariable(Utilidades.nombreAmbito) ;
                                                                                 Utilidades.nombreAmbito=Utilidades.pilaAmbito.pop();
                                                                                 Utilidades.ambitoAnterior=Utilidades.nombreAmbito;
                                                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCTIONDECL",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$5 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int f1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String[] f1 = (String[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 Utilidades.Parametros(id1,Utilidades.ambitoAnterior,f1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$4 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
 Utilidades.pilaAmbito.push(Utilidades.nombreAmbito);Utilidades.ambitoAnterior=Utilidades.nombreAmbito;Utilidades.nombreAmbito=id1;
                                                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NT$3 ::= 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 Simbolo s=new Simbolo(id1.toString(),Utilidades.nombreAmbito,"void",""); 
                                                                        s.desc="Procedimiento";
                                                                        Utilidades.AnadirTabla(s);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // FUNCTIONDECL ::= TYPE IDENT NT$0 leftparen NT$1 FORMALS NT$2 rightparen STMTBLOCK 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int f1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String[] f1 = (String[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
                                                                         //Utilidades.EliminarVariable(Utilidades.nombreAmbito) ;
                                                                         Utilidades.nombreAmbito=Utilidades.pilaAmbito.pop();//vuelvo al ambito anterior
                                                                         Utilidades.ambitoAnterior=Utilidades.nombreAmbito;
                                                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCTIONDECL",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NT$2 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int f1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String[] f1 = (String[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                                                                        //buscar la funcion ya anadir parametros
                                                                                Utilidades.Parametros(id1,Utilidades.ambitoAnterior,f1);
                                                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
 Utilidades.pilaAmbito.push(Utilidades.nombreAmbito);Utilidades.ambitoAnterior=Utilidades.nombreAmbito;Utilidades.nombreAmbito=id1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$0 ::= 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
Simbolo s=new Simbolo(id1.toString(),Utilidades.nombreAmbito,t1,"");s.desc="Funcion" ;
                                                                       Utilidades.AnadirTabla(s);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // TYPE ::= TYPE brackets 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TYPE",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // TYPE ::= IDENT 
            {
              String RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=id1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TYPE",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // TYPE ::= STRING 
            {
              String RESULT =null;
		int S1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int S1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String S1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=S1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TYPE",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // TYPE ::= BOOL 
            {
              String RESULT =null;
		int B1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int B1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String B1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=B1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TYPE",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // TYPE ::= DOUBLE 
            {
              String RESULT =null;
		int DB1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int DB1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String DB1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=DB1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TYPE",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // TYPE ::= INT 
            {
              String RESULT =null;
		int IN1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int IN1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String IN1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=IN1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TYPE",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // VARIABLE ::= T_const TYPE IDENT 
            {
              String RESULT =null;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                Simbolo s=new Simbolo(id2,Utilidades.nombreAmbito,t2,"");
                                s.desc="Constante";
                                Utilidades.AnadirTabla(s);
                                RESULT=t2+":"+id2;
                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARIABLE",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // VARIABLE ::= TYPE IDENT 
            {
              String RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                                Simbolo s=new Simbolo(id1,Utilidades.nombreAmbito,t1,"");
                                s.desc="Variable";
                                Utilidades.AnadirTabla(s);
                                RESULT=t1+":"+id1;
                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARIABLE",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // VARIABLEDECL ::= VARIABLE semicolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARIABLEDECL",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DECL ::= error rightbrace 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECL",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DECL ::= error semicolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECL",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DECL ::= INTERFACEDECL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECL",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DECL ::= CLASSDECL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECL",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DECL ::= FUNCTIONDECL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECL",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DECL ::= VARIABLEDECL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECL",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DECLP ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLP",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DECLP ::= DECLP DECL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLP",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INCLUDE ::= numeral T_include T_includepath 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INCLUDE",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INCLUDESTMT ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INCLUDESTMT",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INCLUDESTMT ::= INCLUDE INCLUDESTMT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INCLUDESTMT",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // PROG ::= INCLUDESTMT DECL DECLP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROG",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PROG EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

